// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static open func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }
        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [BrandedFoodObject]
        Decoders.addDecoder(clazz: [BrandedFoodObject].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObject]> in
            return Decoders.decode(clazz: [BrandedFoodObject].self, source: source)
        }

        // Decoder for BrandedFoodObject
        Decoders.addDecoder(clazz: BrandedFoodObject.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObject> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObject() : instance as! BrandedFoodObject
                switch Decoders.decodeOptional(clazz: [BrandedFoodObjectItems].self, source: sourceDictionary["items"] as AnyObject?) {
                case let .success(value): _result.items = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObject", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectCountryDetails]
        Decoders.addDecoder(clazz: [BrandedFoodObjectCountryDetails].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectCountryDetails]> in
            return Decoders.decode(clazz: [BrandedFoodObjectCountryDetails].self, source: source)
        }

        // Decoder for BrandedFoodObjectCountryDetails
        Decoders.addDecoder(clazz: BrandedFoodObjectCountryDetails.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectCountryDetails> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectCountryDetails() : instance as! BrandedFoodObjectCountryDetails
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["english_speaking"] as AnyObject?) {
                case let .success(value): _result.englishSpeaking = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["non_english_speaking"] as AnyObject?) {
                case let .success(value): _result.nonEnglishSpeaking = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectCountryDetails", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectDietFlags]
        Decoders.addDecoder(clazz: [BrandedFoodObjectDietFlags].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectDietFlags]> in
            return Decoders.decode(clazz: [BrandedFoodObjectDietFlags].self, source: source)
        }

        // Decoder for BrandedFoodObjectDietFlags
        Decoders.addDecoder(clazz: BrandedFoodObjectDietFlags.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectDietFlags> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectDietFlags() : instance as! BrandedFoodObjectDietFlags
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ingredient"] as AnyObject?) {
                case let .success(value): _result.ingredient = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ingredient_description"] as AnyObject?) {
                case let .success(value): _result.ingredientDescription = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["diet_label"] as AnyObject?) {
                case let .success(value): _result.dietLabel = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_compatible"] as AnyObject?) {
                case let .success(value): _result.isCompatible = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["compatibility_level"] as AnyObject?) {
                case let .success(value): _result.compatibilityLevel = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["compatibility_description"] as AnyObject?) {
                case let .success(value): _result.compatibilityDescription = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_allergen"] as AnyObject?) {
                case let .success(value): _result.isAllergen = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectDietFlags", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectDietLabels]
        Decoders.addDecoder(clazz: [BrandedFoodObjectDietLabels].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectDietLabels]> in
            return Decoders.decode(clazz: [BrandedFoodObjectDietLabels].self, source: source)
        }

        // Decoder for BrandedFoodObjectDietLabels
        Decoders.addDecoder(clazz: BrandedFoodObjectDietLabels.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectDietLabels> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectDietLabels() : instance as! BrandedFoodObjectDietLabels
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectDietLabelsVegan.self, source: sourceDictionary["vegan"] as AnyObject?) {
                case let .success(value): _result.vegan = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectDietLabelsVegetarian.self, source: sourceDictionary["vegetarian"] as AnyObject?) {
                case let .success(value): _result.vegetarian = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectDietLabelsGlutenFree.self, source: sourceDictionary["gluten_free"] as AnyObject?) {
                case let .success(value): _result.glutenFree = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectDietLabels", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectDietLabelsGlutenFree]
        Decoders.addDecoder(clazz: [BrandedFoodObjectDietLabelsGlutenFree].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectDietLabelsGlutenFree]> in
            return Decoders.decode(clazz: [BrandedFoodObjectDietLabelsGlutenFree].self, source: source)
        }

        // Decoder for BrandedFoodObjectDietLabelsGlutenFree
        Decoders.addDecoder(clazz: BrandedFoodObjectDietLabelsGlutenFree.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectDietLabelsGlutenFree> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectDietLabelsGlutenFree() : instance as! BrandedFoodObjectDietLabelsGlutenFree
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_compatible"] as AnyObject?) {
                case let .success(value): _result.isCompatible = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["compatibility_level"] as AnyObject?) {
                case let .success(value): _result.compatibilityLevel = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["confidence"] as AnyObject?) {
                case let .success(value): _result.confidence = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["confidence_description"] as AnyObject?) {
                case let .success(value): _result.confidenceDescription = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectDietLabelsGlutenFree", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectDietLabelsVegan]
        Decoders.addDecoder(clazz: [BrandedFoodObjectDietLabelsVegan].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectDietLabelsVegan]> in
            return Decoders.decode(clazz: [BrandedFoodObjectDietLabelsVegan].self, source: source)
        }

        // Decoder for BrandedFoodObjectDietLabelsVegan
        Decoders.addDecoder(clazz: BrandedFoodObjectDietLabelsVegan.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectDietLabelsVegan> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectDietLabelsVegan() : instance as! BrandedFoodObjectDietLabelsVegan
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_compatible"] as AnyObject?) {
                case let .success(value): _result.isCompatible = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["compatibility_level"] as AnyObject?) {
                case let .success(value): _result.compatibilityLevel = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["confidence"] as AnyObject?) {
                case let .success(value): _result.confidence = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["confidence_description"] as AnyObject?) {
                case let .success(value): _result.confidenceDescription = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectDietLabelsVegan", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectDietLabelsVegetarian]
        Decoders.addDecoder(clazz: [BrandedFoodObjectDietLabelsVegetarian].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectDietLabelsVegetarian]> in
            return Decoders.decode(clazz: [BrandedFoodObjectDietLabelsVegetarian].self, source: source)
        }

        // Decoder for BrandedFoodObjectDietLabelsVegetarian
        Decoders.addDecoder(clazz: BrandedFoodObjectDietLabelsVegetarian.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectDietLabelsVegetarian> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectDietLabelsVegetarian() : instance as! BrandedFoodObjectDietLabelsVegetarian
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_compatible"] as AnyObject?) {
                case let .success(value): _result.isCompatible = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["compatibility_level"] as AnyObject?) {
                case let .success(value): _result.compatibilityLevel = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["confidence"] as AnyObject?) {
                case let .success(value): _result.confidence = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["confidence_description"] as AnyObject?) {
                case let .success(value): _result.confidenceDescription = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectDietLabelsVegetarian", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectItems]
        Decoders.addDecoder(clazz: [BrandedFoodObjectItems].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectItems]> in
            return Decoders.decode(clazz: [BrandedFoodObjectItems].self, source: source)
        }

        // Decoder for BrandedFoodObjectItems
        Decoders.addDecoder(clazz: BrandedFoodObjectItems.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectItems> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectItems() : instance as! BrandedFoodObjectItems
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["barcode"] as AnyObject?) {
                case let .success(value): _result.barcode = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["brand"] as AnyObject?) {
                case let .success(value): _result.brand = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ingredients"] as AnyObject?) {
                case let .success(value): _result.ingredients = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectPackage.self, source: sourceDictionary["package"] as AnyObject?) {
                case let .success(value): _result.package = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectServing.self, source: sourceDictionary["serving"] as AnyObject?) {
                case let .success(value): _result.serving = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["categories"] as AnyObject?) {
                case let .success(value): _result.categories = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [BrandedFoodObjectNutrients].self, source: sourceDictionary["nutrients"] as AnyObject?) {
                case let .success(value): _result.nutrients = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectDietLabels.self, source: sourceDictionary["diet_labels"] as AnyObject?) {
                case let .success(value): _result.dietLabels = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [BrandedFoodObjectDietFlags].self, source: sourceDictionary["diet_flags"] as AnyObject?) {
                case let .success(value): _result.dietFlags = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectPackagingPhotos.self, source: sourceDictionary["packaging_photos"] as AnyObject?) {
                case let .success(value): _result.packagingPhotos = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["allergens"] as AnyObject?) {
                case let .success(value): _result.allergens = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["brand_list"] as AnyObject?) {
                case let .success(value): _result.brandList = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["countries"] as AnyObject?) {
                case let .success(value): _result.countries = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectCountryDetails.self, source: sourceDictionary["country_details"] as AnyObject?) {
                case let .success(value): _result.countryDetails = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["palm_oil_ingredients"] as AnyObject?) {
                case let .success(value): _result.palmOilIngredients = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["ingredient_list"] as AnyObject?) {
                case let .success(value): _result.ingredientList = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["has_english_ingredients"] as AnyObject?) {
                case let .success(value): _result.hasEnglishIngredients = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["minerals"] as AnyObject?) {
                case let .success(value): _result.minerals = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["traces"] as AnyObject?) {
                case let .success(value): _result.traces = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["vitamins"] as AnyObject?) {
                case let .success(value): _result.vitamins = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                case let .success(value): _result.description = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["keywords"] as AnyObject?) {
                case let .success(value): _result.keywords = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectItems", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectNutrients]
        Decoders.addDecoder(clazz: [BrandedFoodObjectNutrients].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectNutrients]> in
            return Decoders.decode(clazz: [BrandedFoodObjectNutrients].self, source: source)
        }

        // Decoder for BrandedFoodObjectNutrients
        Decoders.addDecoder(clazz: BrandedFoodObjectNutrients.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectNutrients> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectNutrients() : instance as! BrandedFoodObjectNutrients
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["per_100g"] as AnyObject?) {
                case let .success(value): _result.per100g = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["measurement_unit"] as AnyObject?) {
                case let .success(value): _result.measurementUnit = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rank"] as AnyObject?) {
                case let .success(value): _result.rank = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["data_points"] as AnyObject?) {
                case let .success(value): _result.dataPoints = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                case let .success(value): _result.description = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectNutrients", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectPackage]
        Decoders.addDecoder(clazz: [BrandedFoodObjectPackage].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectPackage]> in
            return Decoders.decode(clazz: [BrandedFoodObjectPackage].self, source: source)
        }

        // Decoder for BrandedFoodObjectPackage
        Decoders.addDecoder(clazz: BrandedFoodObjectPackage.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectPackage> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectPackage() : instance as! BrandedFoodObjectPackage
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"] as AnyObject?) {
                case let .success(value): _result.quantity = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["size"] as AnyObject?) {
                case let .success(value): _result.size = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectPackage", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectPackagingPhotos]
        Decoders.addDecoder(clazz: [BrandedFoodObjectPackagingPhotos].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectPackagingPhotos]> in
            return Decoders.decode(clazz: [BrandedFoodObjectPackagingPhotos].self, source: source)
        }

        // Decoder for BrandedFoodObjectPackagingPhotos
        Decoders.addDecoder(clazz: BrandedFoodObjectPackagingPhotos.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectPackagingPhotos> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectPackagingPhotos() : instance as! BrandedFoodObjectPackagingPhotos
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectPackagingPhotosFront.self, source: sourceDictionary["front"] as AnyObject?) {
                case let .success(value): _result.front = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectPackagingPhotosNutrition.self, source: sourceDictionary["nutrition"] as AnyObject?) {
                case let .success(value): _result.nutrition = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectPackagingPhotosIngredients.self, source: sourceDictionary["ingredients"] as AnyObject?) {
                case let .success(value): _result.ingredients = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectPackagingPhotos", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectPackagingPhotosFront]
        Decoders.addDecoder(clazz: [BrandedFoodObjectPackagingPhotosFront].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectPackagingPhotosFront]> in
            return Decoders.decode(clazz: [BrandedFoodObjectPackagingPhotosFront].self, source: source)
        }

        // Decoder for BrandedFoodObjectPackagingPhotosFront
        Decoders.addDecoder(clazz: BrandedFoodObjectPackagingPhotosFront.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectPackagingPhotosFront> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectPackagingPhotosFront() : instance as! BrandedFoodObjectPackagingPhotosFront
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["small"] as AnyObject?) {
                case let .success(value): _result.small = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumb"] as AnyObject?) {
                case let .success(value): _result.thumb = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display"] as AnyObject?) {
                case let .success(value): _result.display = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectPackagingPhotosFront", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectPackagingPhotosIngredients]
        Decoders.addDecoder(clazz: [BrandedFoodObjectPackagingPhotosIngredients].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectPackagingPhotosIngredients]> in
            return Decoders.decode(clazz: [BrandedFoodObjectPackagingPhotosIngredients].self, source: source)
        }

        // Decoder for BrandedFoodObjectPackagingPhotosIngredients
        Decoders.addDecoder(clazz: BrandedFoodObjectPackagingPhotosIngredients.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectPackagingPhotosIngredients> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectPackagingPhotosIngredients() : instance as! BrandedFoodObjectPackagingPhotosIngredients
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["small"] as AnyObject?) {
                case let .success(value): _result.small = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumb"] as AnyObject?) {
                case let .success(value): _result.thumb = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display"] as AnyObject?) {
                case let .success(value): _result.display = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectPackagingPhotosIngredients", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectPackagingPhotosNutrition]
        Decoders.addDecoder(clazz: [BrandedFoodObjectPackagingPhotosNutrition].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectPackagingPhotosNutrition]> in
            return Decoders.decode(clazz: [BrandedFoodObjectPackagingPhotosNutrition].self, source: source)
        }

        // Decoder for BrandedFoodObjectPackagingPhotosNutrition
        Decoders.addDecoder(clazz: BrandedFoodObjectPackagingPhotosNutrition.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectPackagingPhotosNutrition> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectPackagingPhotosNutrition() : instance as! BrandedFoodObjectPackagingPhotosNutrition
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["small"] as AnyObject?) {
                case let .success(value): _result.small = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumb"] as AnyObject?) {
                case let .success(value): _result.thumb = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display"] as AnyObject?) {
                case let .success(value): _result.display = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectPackagingPhotosNutrition", actual: "\(source)"))
            }
        }
        // Decoder for [BrandedFoodObjectServing]
        Decoders.addDecoder(clazz: [BrandedFoodObjectServing].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[BrandedFoodObjectServing]> in
            return Decoders.decode(clazz: [BrandedFoodObjectServing].self, source: source)
        }

        // Decoder for BrandedFoodObjectServing
        Decoders.addDecoder(clazz: BrandedFoodObjectServing.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BrandedFoodObjectServing> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? BrandedFoodObjectServing() : instance as! BrandedFoodObjectServing
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["size"] as AnyObject?) {
                case let .success(value): _result.size = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["measurement_unit"] as AnyObject?) {
                case let .success(value): _result.measurementUnit = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["size_fulltext"] as AnyObject?) {
                case let .success(value): _result.sizeFulltext = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "BrandedFoodObjectServing", actual: "\(source)"))
            }
        }
        // Decoder for [IngredientObject]
        Decoders.addDecoder(clazz: [IngredientObject].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IngredientObject]> in
            return Decoders.decode(clazz: [IngredientObject].self, source: source)
        }

        // Decoder for IngredientObject
        Decoders.addDecoder(clazz: IngredientObject.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IngredientObject> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IngredientObject() : instance as! IngredientObject
                switch Decoders.decodeOptional(clazz: [IngredientObjectItems].self, source: sourceDictionary["items"] as AnyObject?) {
                case let .success(value): _result.items = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IngredientObject", actual: "\(source)"))
            }
        }
        // Decoder for [IngredientObjectCalorieConversionFactor]
        Decoders.addDecoder(clazz: [IngredientObjectCalorieConversionFactor].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IngredientObjectCalorieConversionFactor]> in
            return Decoders.decode(clazz: [IngredientObjectCalorieConversionFactor].self, source: source)
        }

        // Decoder for IngredientObjectCalorieConversionFactor
        Decoders.addDecoder(clazz: IngredientObjectCalorieConversionFactor.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IngredientObjectCalorieConversionFactor> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IngredientObjectCalorieConversionFactor() : instance as! IngredientObjectCalorieConversionFactor
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["protein_value"] as AnyObject?) {
                case let .success(value): _result.proteinValue = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["fat_value"] as AnyObject?) {
                case let .success(value): _result.fatValue = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["carbohydrate_value"] as AnyObject?) {
                case let .success(value): _result.carbohydrateValue = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IngredientObjectCalorieConversionFactor", actual: "\(source)"))
            }
        }
        // Decoder for [IngredientObjectComponents]
        Decoders.addDecoder(clazz: [IngredientObjectComponents].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IngredientObjectComponents]> in
            return Decoders.decode(clazz: [IngredientObjectComponents].self, source: source)
        }

        // Decoder for IngredientObjectComponents
        Decoders.addDecoder(clazz: IngredientObjectComponents.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IngredientObjectComponents> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IngredientObjectComponents() : instance as! IngredientObjectComponents
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["pct_weight"] as AnyObject?) {
                case let .success(value): _result.pctWeight = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["gram_weight"] as AnyObject?) {
                case let .success(value): _result.gramWeight = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_refuse"] as AnyObject?) {
                case let .success(value): _result.isRefuse = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["data_points"] as AnyObject?) {
                case let .success(value): _result.dataPoints = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IngredientObjectComponents", actual: "\(source)"))
            }
        }
        // Decoder for [IngredientObjectItems]
        Decoders.addDecoder(clazz: [IngredientObjectItems].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IngredientObjectItems]> in
            return Decoders.decode(clazz: [IngredientObjectItems].self, source: source)
        }

        // Decoder for IngredientObjectItems
        Decoders.addDecoder(clazz: IngredientObjectItems.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IngredientObjectItems> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IngredientObjectItems() : instance as! IngredientObjectItems
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["categories"] as AnyObject?) {
                case let .success(value): _result.categories = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [IngredientObjectNutrients].self, source: sourceDictionary["nutrients"] as AnyObject?) {
                case let .success(value): _result.nutrients = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: IngredientObjectCalorieConversionFactor.self, source: sourceDictionary["calorie_conversion_factor"] as AnyObject?) {
                case let .success(value): _result.calorieConversionFactor = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["protein_conversion_factor"] as AnyObject?) {
                case let .success(value): _result.proteinConversionFactor = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BrandedFoodObjectDietLabels.self, source: sourceDictionary["diet_labels"] as AnyObject?) {
                case let .success(value): _result.dietLabels = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [IngredientObjectComponents].self, source: sourceDictionary["components"] as AnyObject?) {
                case let .success(value): _result.components = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [IngredientObjectPortions].self, source: sourceDictionary["portions"] as AnyObject?) {
                case let .success(value): _result.portions = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["common_names"] as AnyObject?) {
                case let .success(value): _result.commonNames = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                case let .success(value): _result.description = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["footnote"] as AnyObject?) {
                case let .success(value): _result.footnote = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IngredientObjectItems", actual: "\(source)"))
            }
        }
        // Decoder for [IngredientObjectNutrients]
        Decoders.addDecoder(clazz: [IngredientObjectNutrients].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IngredientObjectNutrients]> in
            return Decoders.decode(clazz: [IngredientObjectNutrients].self, source: source)
        }

        // Decoder for IngredientObjectNutrients
        Decoders.addDecoder(clazz: IngredientObjectNutrients.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IngredientObjectNutrients> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IngredientObjectNutrients() : instance as! IngredientObjectNutrients
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["per_100g"] as AnyObject?) {
                case let .success(value): _result.per100g = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["measurement_unit"] as AnyObject?) {
                case let .success(value): _result.measurementUnit = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["min"] as AnyObject?) {
                case let .success(value): _result.min = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["max"] as AnyObject?) {
                case let .success(value): _result.max = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["median"] as AnyObject?) {
                case let .success(value): _result.median = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rank"] as AnyObject?) {
                case let .success(value): _result.rank = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["data_points"] as AnyObject?) {
                case let .success(value): _result.dataPoints = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["footnote"] as AnyObject?) {
                case let .success(value): _result.footnote = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                case let .success(value): _result.description = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IngredientObjectNutrients", actual: "\(source)"))
            }
        }
        // Decoder for [IngredientObjectPortions]
        Decoders.addDecoder(clazz: [IngredientObjectPortions].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IngredientObjectPortions]> in
            return Decoders.decode(clazz: [IngredientObjectPortions].self, source: source)
        }

        // Decoder for IngredientObjectPortions
        Decoders.addDecoder(clazz: IngredientObjectPortions.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IngredientObjectPortions> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IngredientObjectPortions() : instance as! IngredientObjectPortions
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["measurement_unit"] as AnyObject?) {
                case let .success(value): _result.measurementUnit = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                case let .success(value): _result.description = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifier"] as AnyObject?) {
                case let .success(value): _result.modifier = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: BigDecimal.self, source: sourceDictionary["gram_weight"] as AnyObject?) {
                case let .success(value): _result.gramWeight = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["data_points"] as AnyObject?) {
                case let .success(value): _result.dataPoints = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["footnote"] as AnyObject?) {
                case let .success(value): _result.footnote = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IngredientObjectPortions", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
