//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI: APIBase {
    /**
     Get a branded food item using a barcode
     - parameter code: (query) UPC/EAN barcode  __Example:__ 0842234000988  __Resources:__ [Database search](https://chompthis.com/api/lookup.php)  _Read [this article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do) for tips and tricks._  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedBarcodePhpGet(code: String, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedBarcodePhpGetWithRequestBuilder(code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a branded food item using a barcode
     - GET /food/branded/barcode.php
     - # Get data for a branded food using the food's UPC/EAN barcode.  __Example:__ ```https://chompthis.com/api/v2/food/branded/barcode.php?api_key=API_KEY&code=CODE``` 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "components" : [ {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    } ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 2,
      "non_english_speaking" : 6
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "total" : 5,
      "size_fulltext" : "size_fulltext",
      "size" : 1,
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      }, {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      } ],
      "usda" : [ {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      }, {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      } ]
    },
    "protein_conversion_factor" : 7.457744773683766,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 6,
        "name" : "name",
        "compatibility_level" : 9,
        "is_compatible" : true
      }
    },
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "common_name" : "common_name",
    "barcode" : "barcode",
    "brand" : "brand",
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ],
    "package" : {
      "quantity" : 0,
      "size" : 6
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 6.84685269835264,
      "protein_value" : 1.0246457001441578,
      "fat_value" : 1.4894159098541704
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "components" : [ {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    } ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 2,
      "non_english_speaking" : 6
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "total" : 5,
      "size_fulltext" : "size_fulltext",
      "size" : 1,
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      }, {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      } ],
      "usda" : [ {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      }, {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      } ]
    },
    "protein_conversion_factor" : 7.457744773683766,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 6,
        "name" : "name",
        "compatibility_level" : 9,
        "is_compatible" : true
      }
    },
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "common_name" : "common_name",
    "barcode" : "barcode",
    "brand" : "brand",
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ],
    "package" : {
      "quantity" : 0,
      "size" : 6
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 6.84685269835264,
      "protein_value" : 1.0246457001441578,
      "fat_value" : 1.4894159098541704
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter code: (query) UPC/EAN barcode  __Example:__ 0842234000988  __Resources:__ [Database search](https://chompthis.com/api/lookup.php)  _Read [this article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do) for tips and tricks._  
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedBarcodePhpGetWithRequestBuilder(code: String) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/barcode.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "code": code
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a branded food item using an ID number
     - parameter id: (query) Chomp branded food ID.  _Set \&quot;source&#x3D;USDA\&quot; if you wish to pass in the food&#x27;s FoodData Central ID (fdc_id)._  __Example #1:__ 15  __Resources:__ [Find branded food IDs](https://chompthis.com/api/lookup.php)  
     - parameter source: (query) Specify the data source (optional).  You must pass in \&quot;USDA\&quot; if you want to look up a food item using a USDA FDC ID.  __Example:__ USDA _(defaults to \&quot;Chomp\&quot;)_  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedIdPhpGet(id: Int32, source: String? = nil, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedIdPhpGetWithRequestBuilder(id: id, source: source).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a branded food item using an ID number
     - GET /food/branded/id.php
     - # Get data for a branded food using Chomp's internal ID number.  _Alternatively, set the \"source\" parameter to \"USDA\" and use the food's FDC ID._  __Example:__ ```https://chompthis.com/api/v2/food/branded/id.php?api_key=API_KEY&id=ID``` 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "components" : [ {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    } ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 2,
      "non_english_speaking" : 6
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "total" : 5,
      "size_fulltext" : "size_fulltext",
      "size" : 1,
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      }, {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      } ],
      "usda" : [ {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      }, {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      } ]
    },
    "protein_conversion_factor" : 7.457744773683766,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 6,
        "name" : "name",
        "compatibility_level" : 9,
        "is_compatible" : true
      }
    },
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "common_name" : "common_name",
    "barcode" : "barcode",
    "brand" : "brand",
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ],
    "package" : {
      "quantity" : 0,
      "size" : 6
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 6.84685269835264,
      "protein_value" : 1.0246457001441578,
      "fat_value" : 1.4894159098541704
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "components" : [ {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    } ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 2,
      "non_english_speaking" : 6
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "total" : 5,
      "size_fulltext" : "size_fulltext",
      "size" : 1,
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      }, {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      } ],
      "usda" : [ {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      }, {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      } ]
    },
    "protein_conversion_factor" : 7.457744773683766,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 6,
        "name" : "name",
        "compatibility_level" : 9,
        "is_compatible" : true
      }
    },
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "common_name" : "common_name",
    "barcode" : "barcode",
    "brand" : "brand",
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ],
    "package" : {
      "quantity" : 0,
      "size" : 6
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 6.84685269835264,
      "protein_value" : 1.0246457001441578,
      "fat_value" : 1.4894159098541704
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter id: (query) Chomp branded food ID.  _Set \&quot;source&#x3D;USDA\&quot; if you wish to pass in the food&#x27;s FoodData Central ID (fdc_id)._  __Example #1:__ 15  __Resources:__ [Find branded food IDs](https://chompthis.com/api/lookup.php)  
     - parameter source: (query) Specify the data source (optional).  You must pass in \&quot;USDA\&quot; if you want to look up a food item using a USDA FDC ID.  __Example:__ USDA _(defaults to \&quot;Chomp\&quot;)_  (optional)
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedIdPhpGetWithRequestBuilder(id: Int32, source: String? = nil) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/id.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "id": id.encodeToJSON(),
                        "source": source
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_foodBrandedNamePhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
    }

    /**
     Get a branded food item by name
     - parameter name: (query) Branded food name  __Example:__ Starburst  __Resources:__ [Find branded food names](https://chompthis.com/api/lookup.php)  
     - parameter limit: (query) Set maximum number of records you want the API to return.  ___Note:__ The maximum value is 10._  __Example:__ 3 _(defaults to 10)_  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedNamePhpGet(name: String, limit: Limit_foodBrandedNamePhpGet? = nil, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedNamePhpGetWithRequestBuilder(name: name, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a branded food item by name
     - GET /food/branded/name.php
     - # Search for branded food items by name.  __Example:__ ```https://chompthis.com/api/v2/food/branded/name.php?api_key=API_KEY&name=NAME``` 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "components" : [ {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    } ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 2,
      "non_english_speaking" : 6
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "total" : 5,
      "size_fulltext" : "size_fulltext",
      "size" : 1,
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      }, {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      } ],
      "usda" : [ {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      }, {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      } ]
    },
    "protein_conversion_factor" : 7.457744773683766,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 6,
        "name" : "name",
        "compatibility_level" : 9,
        "is_compatible" : true
      }
    },
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "common_name" : "common_name",
    "barcode" : "barcode",
    "brand" : "brand",
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ],
    "package" : {
      "quantity" : 0,
      "size" : 6
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 6.84685269835264,
      "protein_value" : 1.0246457001441578,
      "fat_value" : 1.4894159098541704
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "components" : [ {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    } ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 2,
      "non_english_speaking" : 6
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "total" : 5,
      "size_fulltext" : "size_fulltext",
      "size" : 1,
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      }, {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      } ],
      "usda" : [ {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      }, {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      } ]
    },
    "protein_conversion_factor" : 7.457744773683766,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 6,
        "name" : "name",
        "compatibility_level" : 9,
        "is_compatible" : true
      }
    },
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "common_name" : "common_name",
    "barcode" : "barcode",
    "brand" : "brand",
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ],
    "package" : {
      "quantity" : 0,
      "size" : 6
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 6.84685269835264,
      "protein_value" : 1.0246457001441578,
      "fat_value" : 1.4894159098541704
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter name: (query) Branded food name  __Example:__ Starburst  __Resources:__ [Find branded food names](https://chompthis.com/api/lookup.php)  
     - parameter limit: (query) Set maximum number of records you want the API to return.  ___Note:__ The maximum value is 10._  __Example:__ 3 _(defaults to 10)_  (optional)
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedNamePhpGetWithRequestBuilder(name: String, limit: Limit_foodBrandedNamePhpGet? = nil) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/name.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "name": name,
                        "limit": limit?.rawValue
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_foodBrandedSearchPhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
    }

    /**
     Get data for branded food items using various search parameters
     - parameter allergen: (query) Specify a required allergen ingredient (optional)  __Example__: Peanuts  __Resources__: [List of allergens](https://chompthis.com/api/data/allergen.php)  (optional)
     - parameter brand: (query) Specify a required brand (optional)  __Example__: Starbucks  __Resources__: [List of brands](https://chompthis.com/api/data/brand.php)  (optional)
     - parameter category: (query) Specify a required category (optional)  __Example__: Pasta Dishes  __Resources__: [List of categories](https://chompthis.com/api/data/category.php)  (optional)
     - parameter country: (query) Specify a required country (optional)  __Example__: United States  __Resources__: [List of countries](https://chompthis.com/api/data/country.php)  (optional)
     - parameter diet: (query) Specify a required diet (optional)  _Filters the search to only include food items that are considered compatible with the following diets: Vegan, Vegetarian, Gluten Free_  __Example__: Gluten Free  __Resources__: [List of diets](https://chompthis.com/api/data/lifestyle.php)  (optional)
     - parameter ingredient: (query) Specify a required ingredient (optional)  __Example__: Salt  __Resources__: [List of ingredients](https://chompthis.com/api/data/ingredient.php)  (optional)
     - parameter keyword: (query) Specify a required keyword (optional)  __Example__: Starbucks  __Resources__: [List of brands](https://chompthis.com/api/data/brand.php)  (optional)
     - parameter mineral: (query) Specify a required mineral (optional)  __Example__: Potassium  __Resources__: [List of minerals](https://chompthis.com/api/data/mineral.php)  (optional)
     - parameter nutrient: (query) Specify a required nutrition label item (optional)  __Example__: Caffeine  __Resources__: [List of nutrition label items](https://chompthis.com/api/data/nutrition.php)  (optional)
     - parameter palmOil: (query) Specify a required palm oil ingredient (optional)  __Example__: E160a Beta Carotene  __Resources__: [List of palm oil ingredients](https://chompthis.com/api/data/palm-oil.php)  (optional)
     - parameter trace: (query) Specify a required trace ingredient (optional)  __Example__: Tree Nuts  __Resources__: [List of trace ingredients](https://chompthis.com/api/data/trace.php)  (optional)
     - parameter vitamin: (query) Specify a required vitamin (optional)  __Example__: Biotin  __Resources__: [List of vitamins](https://chompthis.com/api/data/vitamin.php)  (optional)
     - parameter limit: (query) Set maximum number of records you want the API to return.  ___Note:__ The maximum value is 10._  __Example:__ 3 _(defaults to 10)_  (optional)
     - parameter page: (query) Specify the search response page number.  _Each page will contain up to 10 items._  __Example__: 1 _(default)_  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedSearchPhpGet(allergen: String? = nil, brand: String? = nil, category: String? = nil, country: String? = nil, diet: String? = nil, ingredient: String? = nil, keyword: String? = nil, mineral: String? = nil, nutrient: String? = nil, palmOil: String? = nil, trace: String? = nil, vitamin: String? = nil, limit: Limit_foodBrandedSearchPhpGet? = nil, page: Int32? = nil, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedSearchPhpGetWithRequestBuilder(allergen: allergen, brand: brand, category: category, country: country, diet: diet, ingredient: ingredient, keyword: keyword, mineral: mineral, nutrient: nutrient, palmOil: palmOil, trace: trace, vitamin: vitamin, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get data for branded food items using various search parameters
     - GET /food/branded/search.php
     - # Search for branded food items using various parameters.  __Example:__ ```https://chompthis.com/api/v2/food/branded/search.php?api_key=API_KEY&brand=BRAND&country=COUNTRY&page=1```  ___Tip:__ Get started by using the [Query Builder](https://chompthis.com/api/build.php)._ 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "components" : [ {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    } ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 2,
      "non_english_speaking" : 6
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "total" : 5,
      "size_fulltext" : "size_fulltext",
      "size" : 1,
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      }, {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      } ],
      "usda" : [ {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      }, {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      } ]
    },
    "protein_conversion_factor" : 7.457744773683766,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 6,
        "name" : "name",
        "compatibility_level" : 9,
        "is_compatible" : true
      }
    },
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "common_name" : "common_name",
    "barcode" : "barcode",
    "brand" : "brand",
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ],
    "package" : {
      "quantity" : 0,
      "size" : 6
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 6.84685269835264,
      "protein_value" : 1.0246457001441578,
      "fat_value" : 1.4894159098541704
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "components" : [ {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    } ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 2,
      "non_english_speaking" : 6
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "total" : 5,
      "size_fulltext" : "size_fulltext",
      "size" : 1,
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      }, {
        "total" : 7.061401241503109,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 5.637376656633329,
        "per_serving" : 2.3021358869347655
      } ],
      "usda" : [ {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      }, {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      } ]
    },
    "protein_conversion_factor" : 7.457744773683766,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 6,
        "name" : "name",
        "compatibility_level" : 9,
        "is_compatible" : true
      }
    },
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "common_name" : "common_name",
    "barcode" : "barcode",
    "brand" : "brand",
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ],
    "package" : {
      "quantity" : 0,
      "size" : 6
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 8,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 6.84685269835264,
      "protein_value" : 1.0246457001441578,
      "fat_value" : 1.4894159098541704
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter allergen: (query) Specify a required allergen ingredient (optional)  __Example__: Peanuts  __Resources__: [List of allergens](https://chompthis.com/api/data/allergen.php)  (optional)
     - parameter brand: (query) Specify a required brand (optional)  __Example__: Starbucks  __Resources__: [List of brands](https://chompthis.com/api/data/brand.php)  (optional)
     - parameter category: (query) Specify a required category (optional)  __Example__: Pasta Dishes  __Resources__: [List of categories](https://chompthis.com/api/data/category.php)  (optional)
     - parameter country: (query) Specify a required country (optional)  __Example__: United States  __Resources__: [List of countries](https://chompthis.com/api/data/country.php)  (optional)
     - parameter diet: (query) Specify a required diet (optional)  _Filters the search to only include food items that are considered compatible with the following diets: Vegan, Vegetarian, Gluten Free_  __Example__: Gluten Free  __Resources__: [List of diets](https://chompthis.com/api/data/lifestyle.php)  (optional)
     - parameter ingredient: (query) Specify a required ingredient (optional)  __Example__: Salt  __Resources__: [List of ingredients](https://chompthis.com/api/data/ingredient.php)  (optional)
     - parameter keyword: (query) Specify a required keyword (optional)  __Example__: Starbucks  __Resources__: [List of brands](https://chompthis.com/api/data/brand.php)  (optional)
     - parameter mineral: (query) Specify a required mineral (optional)  __Example__: Potassium  __Resources__: [List of minerals](https://chompthis.com/api/data/mineral.php)  (optional)
     - parameter nutrient: (query) Specify a required nutrition label item (optional)  __Example__: Caffeine  __Resources__: [List of nutrition label items](https://chompthis.com/api/data/nutrition.php)  (optional)
     - parameter palmOil: (query) Specify a required palm oil ingredient (optional)  __Example__: E160a Beta Carotene  __Resources__: [List of palm oil ingredients](https://chompthis.com/api/data/palm-oil.php)  (optional)
     - parameter trace: (query) Specify a required trace ingredient (optional)  __Example__: Tree Nuts  __Resources__: [List of trace ingredients](https://chompthis.com/api/data/trace.php)  (optional)
     - parameter vitamin: (query) Specify a required vitamin (optional)  __Example__: Biotin  __Resources__: [List of vitamins](https://chompthis.com/api/data/vitamin.php)  (optional)
     - parameter limit: (query) Set maximum number of records you want the API to return.  ___Note:__ The maximum value is 10._  __Example:__ 3 _(defaults to 10)_  (optional)
     - parameter page: (query) Specify the search response page number.  _Each page will contain up to 10 items._  __Example__: 1 _(default)_  (optional)
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedSearchPhpGetWithRequestBuilder(allergen: String? = nil, brand: String? = nil, category: String? = nil, country: String? = nil, diet: String? = nil, ingredient: String? = nil, keyword: String? = nil, mineral: String? = nil, nutrient: String? = nil, palmOil: String? = nil, trace: String? = nil, vitamin: String? = nil, limit: Limit_foodBrandedSearchPhpGet? = nil, page: Int32? = nil) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/search.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "allergen": allergen,
                        "brand": brand,
                        "category": category,
                        "country": country,
                        "diet": diet,
                        "ingredient": ingredient,
                        "keyword": keyword,
                        "mineral": mineral,
                        "nutrient": nutrient,
                        "palm_oil": palmOil,
                        "trace": trace,
                        "vitamin": vitamin,
                        "limit": limit?.rawValue,
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_ingredientSearchPhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Get raw/generic food ingredient item(s)
     - parameter find: (query) Specify the ingredient name(s).  __Example #1:__ broccoli  __Example #2:__ broccoli,cauliflower,spinach  ___Important Note:__ Set the \&quot;is_list\&quot; parameter to true before passing in a comma-separated list of ingredients._  
     - parameter list: (query) Specify if you are searching for multiple ingredients.  _Setting this to true will configure this endpoint so that it accepts a comma-separated list of ingredients._  _By default, this endpoint expects a single ingredient._  __Example:__ true _(defaults to false)_  
     - parameter raw: (query) Specify if you only want data for raw ingredients.  __Example:__ true _(defaults to true)_  (optional)
     - parameter limit: (query) Set maximum number of records you want the API to return.  ___Important Note:__ Setting this to \&quot;1\&quot; will return 1 record per search term._  __Example:__ 1 _(defaults to 1, max is 3)_  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ingredientSearchPhpGet(find: Int32, list: Bool, raw: Bool? = nil, limit: Limit_ingredientSearchPhpGet? = nil, completion: @escaping ((_ data: IngredientObject?, _ error: ErrorResponse?) -> Void)) {
        ingredientSearchPhpGetWithRequestBuilder(find: find, list: list, raw: raw, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get raw/generic food ingredient item(s)
     - GET /ingredient/search.php
     - # Get data for a specific ingredient or a specific set of ingredients.  __Example:__ ```https://chompthis.com/api/v2/ingredient/search.php?api_key=API_KEY&find=STRING/LIST&list=BOOLEAN&raw=BOOLEAN``` 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "protein_conversion_factor" : 0.8008281904610115,
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 6.84685269835264,
      "protein_value" : 1.0246457001441578,
      "fat_value" : 1.4894159098541704
    },
    "components" : [ {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    } ],
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 6,
        "name" : "name",
        "compatibility_level" : 9,
        "is_compatible" : true
      }
    },
    "name" : "name",
    "description" : "description",
    "categories" : [ "categories", "categories" ],
    "footnote" : "footnote",
    "common_name" : "common_name",
    "nutrients" : {
      "usda" : [ {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      }, {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      } ]
    },
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ]
  }, {
    "protein_conversion_factor" : 0.8008281904610115,
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 6.84685269835264,
      "protein_value" : 1.0246457001441578,
      "fat_value" : 1.4894159098541704
    },
    "components" : [ {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 3,
      "pct_weight" : 9.018348186070783,
      "gram_weight" : 6.438423552598547,
      "name" : "name",
      "is_refuse" : true
    } ],
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 6,
        "name" : "name",
        "compatibility_level" : 9,
        "is_compatible" : true
      }
    },
    "name" : "name",
    "description" : "description",
    "categories" : [ "categories", "categories" ],
    "footnote" : "footnote",
    "common_name" : "common_name",
    "nutrients" : {
      "usda" : [ {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      }, {
        "data_points" : 1,
        "min" : 2.027123023002322,
        "median" : 7.386281948385884,
        "max" : 4.145608029883936,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "description" : "description",
        "id" : 9,
        "per_100g" : 3.616076749251911,
        "footnote" : "footnote",
        "source" : "source"
      } ]
    },
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 6.965117697638846,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ]
  } ]
}}]
     - parameter find: (query) Specify the ingredient name(s).  __Example #1:__ broccoli  __Example #2:__ broccoli,cauliflower,spinach  ___Important Note:__ Set the \&quot;is_list\&quot; parameter to true before passing in a comma-separated list of ingredients._  
     - parameter list: (query) Specify if you are searching for multiple ingredients.  _Setting this to true will configure this endpoint so that it accepts a comma-separated list of ingredients._  _By default, this endpoint expects a single ingredient._  __Example:__ true _(defaults to false)_  
     - parameter raw: (query) Specify if you only want data for raw ingredients.  __Example:__ true _(defaults to true)_  (optional)
     - parameter limit: (query) Set maximum number of records you want the API to return.  ___Important Note:__ Setting this to \&quot;1\&quot; will return 1 record per search term._  __Example:__ 1 _(defaults to 1, max is 3)_  (optional)
     - returns: RequestBuilder<IngredientObject> 
     */
    open class func ingredientSearchPhpGetWithRequestBuilder(find: Int32, list: Bool, raw: Bool? = nil, limit: Limit_ingredientSearchPhpGet? = nil) -> RequestBuilder<IngredientObject> {
        let path = "/ingredient/search.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "find": find.encodeToJSON(),
                        "list": list,
                        "raw": raw,
                        "limit": limit?.rawValue
        ])

        let requestBuilder: RequestBuilder<IngredientObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
