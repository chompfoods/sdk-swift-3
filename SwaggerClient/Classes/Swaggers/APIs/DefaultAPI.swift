//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI: APIBase {
    /**
     Get a branded food item using a barcode
     - parameter code: (query) #### UPC/EAN barcode  **Example** &gt; &#x60;&#x60;&#x60;&amp;code&#x3D;0842234000988&#x60;&#x60;&#x60;  
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedBarcodePhpGet(code: String, userId: String? = nil, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedBarcodePhpGetWithRequestBuilder(code: code, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a branded food item using a barcode
     - GET /food/branded/barcode.php
     - ## Get data for a branded food using the food's UPC/EAN barcode.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example**  > ```https://chompthis.com/api/v2/food/branded/barcode.php?api_key=API_KEY&code=CODE```  **Tips**   * Read our **[Knowledge Base article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do)** for helpful tips and tricks.   * Perform a [check-digit](https://en.wikipedia.org/wiki/Check_digit#UPC) on the barcode you are using.   * Use a barcode from our website [ChompThis.com](https://chompthis.com/?r=api). Search for a food and use the barcode shown in the search results.   * It is possible that our database contains the food you're looking for, but does not have the same barcode you are using. This can happen if a manufacturer introduces a variation of the same food, or the barcode you got was from a 2 oz bag of chips when our database has the food packaged in a 4 oz bag.   * [Contact us](https://chompthis.com/contact.php?api=y) if you are having trouble. 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 7,
      "non_english_speaking" : 1
    },
    "traces" : [ "traces", "traces" ],
    "description" : "description",
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "size_fulltext" : "size_fulltext",
      "size" : "size",
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : [ {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    }, {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    } ],
    "allergens" : [ "allergens", "allergens" ],
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 7,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 3,
        "is_compatible" : true
      }
    },
    "name" : "name",
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 7,
      "non_english_speaking" : 1
    },
    "traces" : [ "traces", "traces" ],
    "description" : "description",
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "size_fulltext" : "size_fulltext",
      "size" : "size",
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : [ {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    }, {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    } ],
    "allergens" : [ "allergens", "allergens" ],
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 7,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 3,
        "is_compatible" : true
      }
    },
    "name" : "name",
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter code: (query) #### UPC/EAN barcode  **Example** &gt; &#x60;&#x60;&#x60;&amp;code&#x3D;0842234000988&#x60;&#x60;&#x60;  
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedBarcodePhpGetWithRequestBuilder(code: String, userId: String? = nil) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/barcode.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "code": code,
                        "user_id": userId
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_foodBrandedNamePhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
    }

    /**
     Get a branded food item by name
     - parameter name: (query) #### Search for branded food items using a general food name keyword. This does not have to exactly match the \&quot;official\&quot; name for the food.  **Example** &gt; &#x60;&#x60;&#x60;&amp;name&#x3D;Starburst&#x60;&#x60;&#x60;  
     - parameter limit: (query) #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedNamePhpGet(name: String, limit: Limit_foodBrandedNamePhpGet? = nil, page: Int32? = nil, userId: String? = nil, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedNamePhpGetWithRequestBuilder(name: name, limit: limit, page: page, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a branded food item by name
     - GET /food/branded/name.php
     - ## Search for branded food items by name.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example** > ```https://chompthis.com/api/v2/food/branded/name.php?api_key=API_KEY&name=NAME```  **Tips**   * Get started by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 7,
      "non_english_speaking" : 1
    },
    "traces" : [ "traces", "traces" ],
    "description" : "description",
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "size_fulltext" : "size_fulltext",
      "size" : "size",
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : [ {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    }, {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    } ],
    "allergens" : [ "allergens", "allergens" ],
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 7,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 3,
        "is_compatible" : true
      }
    },
    "name" : "name",
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 7,
      "non_english_speaking" : 1
    },
    "traces" : [ "traces", "traces" ],
    "description" : "description",
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "size_fulltext" : "size_fulltext",
      "size" : "size",
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : [ {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    }, {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    } ],
    "allergens" : [ "allergens", "allergens" ],
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 7,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 3,
        "is_compatible" : true
      }
    },
    "name" : "name",
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter name: (query) #### Search for branded food items using a general food name keyword. This does not have to exactly match the \&quot;official\&quot; name for the food.  **Example** &gt; &#x60;&#x60;&#x60;&amp;name&#x3D;Starburst&#x60;&#x60;&#x60;  
     - parameter limit: (query) #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedNamePhpGetWithRequestBuilder(name: String, limit: Limit_foodBrandedNamePhpGet? = nil, page: Int32? = nil, userId: String? = nil) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/name.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "name": name,
                        "limit": limit?.rawValue,
                        "page": page?.encodeToJSON(),
                        "user_id": userId
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter diet
     */
    public enum Diet_foodBrandedSearchPhpGet: String { 
        case vegan = "Vegan"
        case vegetarian = "Vegetarian"
        case glutenFree = "Gluten Free"
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_foodBrandedSearchPhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
    }

    /**
     Get data for branded food items using various search parameters
     - parameter allergen: (query) #### Filter the search to only include branded foods that contain a specific allergen.  **Example** &gt; &#x60;&#x60;&#x60;&amp;allergen&#x3D;Peanuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter brand: (query) #### Filter the search to only include branded foods that are owned by a specific brand.  **Example** &gt; &#x60;&#x60;&#x60;&amp;brand&#x3D;Starbucks&#x60;&#x60;&#x60;  (optional)
     - parameter category: (query) #### Filter the search to only include branded foods from a specific category.  **Example** &gt; &#x60;&#x60;&#x60;&amp;category&#x3D;Plant Based Foods&#x60;&#x60;&#x60;  (optional)
     - parameter country: (query) #### Filter the search to only include branded foods that are sold in a specific country.  **Example** &gt; &#x60;&#x60;&#x60;&amp;country&#x3D;United States&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter diet: (query) #### Filter the search to only include branded foods that are considered compatible with a specific diet.  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter ingredient: (query) #### Filter the search to only include branded foods that contain a specific ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;ingredient&#x3D;Salt&#x60;&#x60;&#x60;  (optional)
     - parameter keyword: (query) #### Filter the search to only include branded foods that are associated with a specific keyword.  **Example** &gt; &#x60;&#x60;&#x60;&amp;keyword&#x3D;Organic&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter mineral: (query) #### Filter the search to only include branded foods that contain a specific mineral.  **Example** &gt; &#x60;&#x60;&#x60;&amp;mineral&#x3D;Potassium&#x60;&#x60;&#x60;  (optional)
     - parameter nutrient: (query) #### Filter the search to only include branded foods that contain a specific nutrient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrient&#x3D;Caffeine&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter palmOil: (query) #### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.  **Example** &gt; &#x60;&#x60;&#x60;&amp;palm_oil&#x3D;E160a Beta Carotene&#x60;&#x60;&#x60;  (optional)
     - parameter trace: (query) ### Filter the search to only include branded foods that contain a specific trace ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;trace&#x3D;Tree Nuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter vitamin: (query) #### Filter the search to only include branded foods that contain a specific vitamin.  **Example** &gt; &#x60;&#x60;&#x60;&amp;vitamin&#x3D;Biotin&#x60;&#x60;&#x60;  (optional)
     - parameter limit: (query) #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedSearchPhpGet(allergen: String? = nil, brand: String? = nil, category: String? = nil, country: String? = nil, diet: Diet_foodBrandedSearchPhpGet? = nil, ingredient: String? = nil, keyword: String? = nil, mineral: String? = nil, nutrient: String? = nil, palmOil: String? = nil, trace: String? = nil, vitamin: String? = nil, limit: Limit_foodBrandedSearchPhpGet? = nil, page: Int32? = nil, userId: String? = nil, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedSearchPhpGetWithRequestBuilder(allergen: allergen, brand: brand, category: category, country: country, diet: diet, ingredient: ingredient, keyword: keyword, mineral: mineral, nutrient: nutrient, palmOil: palmOil, trace: trace, vitamin: vitamin, limit: limit, page: page, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get data for branded food items using various search parameters
     - GET /food/branded/search.php
     - ## Search for branded food items using various parameters.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example** > ```https://chompthis.com/api/v2/food/branded/search.php?api_key=API_KEY&brand=BRAND&country=COUNTRY&page=1```  **Tips**    * Get started by using the **[Query Builder](https://chompthis.com/api/build.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 7,
      "non_english_speaking" : 1
    },
    "traces" : [ "traces", "traces" ],
    "description" : "description",
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "size_fulltext" : "size_fulltext",
      "size" : "size",
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : [ {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    }, {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    } ],
    "allergens" : [ "allergens", "allergens" ],
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 7,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 3,
        "is_compatible" : true
      }
    },
    "name" : "name",
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 7,
      "non_english_speaking" : 1
    },
    "traces" : [ "traces", "traces" ],
    "description" : "description",
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 4,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "size_fulltext" : "size_fulltext",
      "size" : "size",
      "measurement_unit" : "measurement_unit"
    },
    "nutrients" : [ {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    }, {
      "data_points" : 5,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 1,
      "description" : "description",
      "per_100g" : 6.027456183070403
    } ],
    "allergens" : [ "allergens", "allergens" ],
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 7,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 2,
        "name" : "name",
        "compatibility_level" : 3,
        "is_compatible" : true
      }
    },
    "name" : "name",
    "ingredients" : "ingredients",
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter allergen: (query) #### Filter the search to only include branded foods that contain a specific allergen.  **Example** &gt; &#x60;&#x60;&#x60;&amp;allergen&#x3D;Peanuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter brand: (query) #### Filter the search to only include branded foods that are owned by a specific brand.  **Example** &gt; &#x60;&#x60;&#x60;&amp;brand&#x3D;Starbucks&#x60;&#x60;&#x60;  (optional)
     - parameter category: (query) #### Filter the search to only include branded foods from a specific category.  **Example** &gt; &#x60;&#x60;&#x60;&amp;category&#x3D;Plant Based Foods&#x60;&#x60;&#x60;  (optional)
     - parameter country: (query) #### Filter the search to only include branded foods that are sold in a specific country.  **Example** &gt; &#x60;&#x60;&#x60;&amp;country&#x3D;United States&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter diet: (query) #### Filter the search to only include branded foods that are considered compatible with a specific diet.  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter ingredient: (query) #### Filter the search to only include branded foods that contain a specific ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;ingredient&#x3D;Salt&#x60;&#x60;&#x60;  (optional)
     - parameter keyword: (query) #### Filter the search to only include branded foods that are associated with a specific keyword.  **Example** &gt; &#x60;&#x60;&#x60;&amp;keyword&#x3D;Organic&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter mineral: (query) #### Filter the search to only include branded foods that contain a specific mineral.  **Example** &gt; &#x60;&#x60;&#x60;&amp;mineral&#x3D;Potassium&#x60;&#x60;&#x60;  (optional)
     - parameter nutrient: (query) #### Filter the search to only include branded foods that contain a specific nutrient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrient&#x3D;Caffeine&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter palmOil: (query) #### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.  **Example** &gt; &#x60;&#x60;&#x60;&amp;palm_oil&#x3D;E160a Beta Carotene&#x60;&#x60;&#x60;  (optional)
     - parameter trace: (query) ### Filter the search to only include branded foods that contain a specific trace ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;trace&#x3D;Tree Nuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter vitamin: (query) #### Filter the search to only include branded foods that contain a specific vitamin.  **Example** &gt; &#x60;&#x60;&#x60;&amp;vitamin&#x3D;Biotin&#x60;&#x60;&#x60;  (optional)
     - parameter limit: (query) #### Set maximum number of records you want the API to return. The default value is \&quot;**10**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedSearchPhpGetWithRequestBuilder(allergen: String? = nil, brand: String? = nil, category: String? = nil, country: String? = nil, diet: Diet_foodBrandedSearchPhpGet? = nil, ingredient: String? = nil, keyword: String? = nil, mineral: String? = nil, nutrient: String? = nil, palmOil: String? = nil, trace: String? = nil, vitamin: String? = nil, limit: Limit_foodBrandedSearchPhpGet? = nil, page: Int32? = nil, userId: String? = nil) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/search.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "allergen": allergen,
                        "brand": brand,
                        "category": category,
                        "country": country,
                        "diet": diet?.rawValue,
                        "ingredient": ingredient,
                        "keyword": keyword,
                        "mineral": mineral,
                        "nutrient": nutrient,
                        "palm_oil": palmOil,
                        "trace": trace,
                        "vitamin": vitamin,
                        "limit": limit?.rawValue,
                        "page": page?.encodeToJSON(),
                        "user_id": userId
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_foodIngredientSearchPhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Get raw/generic food ingredient item(s)
     - parameter find: (query) Search our database for a single ingredient or a specific set of ingredients.  **Example #1: Single Ingredient** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli&#x60;&#x60;&#x60;  **Example #2: Set of Ingredients** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli,buttermilk waffle,mashed potatoes&#x60;&#x60;&#x60;  **Important Notes**    * Comma-separated lists cannot contain more than **10 ingredients**. You must perform additional API calls if you are looking up more than 10 ingredients.  
     - parameter limit: (query) #### Set maximum number of records you want the API to return, per search term. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodIngredientSearchPhpGet(find: String, limit: Limit_foodIngredientSearchPhpGet? = nil, userId: String? = nil, completion: @escaping ((_ data: IngredientObject?, _ error: ErrorResponse?) -> Void)) {
        foodIngredientSearchPhpGetWithRequestBuilder(find: find, limit: limit, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get raw/generic food ingredient item(s)
     - GET /food/ingredient/search.php
     - ## Get data for a specific ingredient or a specific set of ingredients.  **You must have a Food API key to use this endpoint.** Get a [Food API key](https://chompthis.com/api/).  **Example #1: Single Ingredient** > ```https://chompthis.com/api/v2/food/ingredient/search.php?api_key=API_KEY&find=raw broccoli```  **Example #2: Set of Ingredients** > ```https://chompthis.com/api/v2/food/ingredient/search.php?api_key=API_KEY&find=raw broccoli,mashed potatoes,chicken drumstick```  **Tips**   * Expose ingredient endpoints by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "protein_conversion_factor" : 2.027123023002322,
    "score" : "score",
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 3.616076749251911,
      "protein_value" : 7.061401241503109,
      "fat_value" : 9.301444243932576
    },
    "components" : [ {
      "data_points" : 1,
      "pct_weight" : 4.145608029883936,
      "gram_weight" : 7.386281948385884,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 1,
      "pct_weight" : 4.145608029883936,
      "gram_weight" : 7.386281948385884,
      "name" : "name",
      "is_refuse" : true
    } ],
    "name" : "name",
    "search_term" : "search_term",
    "categories" : [ "categories", "categories" ],
    "footnote" : "footnote",
    "common_name" : "common_name",
    "nutrients" : [ {
      "data_points" : 2,
      "min" : 6.027456183070403,
      "median" : 5.962133916683182,
      "max" : 1.4658129805029452,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 5,
      "description" : "description",
      "per_100g" : 0.8008281904610115,
      "footnote" : "footnote"
    }, {
      "data_points" : 2,
      "min" : 6.027456183070403,
      "median" : 5.962133916683182,
      "max" : 1.4658129805029452,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 5,
      "description" : "description",
      "per_100g" : 0.8008281904610115,
      "footnote" : "footnote"
    } ],
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 1.0246457001441578,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 1.0246457001441578,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ]
  }, {
    "protein_conversion_factor" : 2.027123023002322,
    "score" : "score",
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 3.616076749251911,
      "protein_value" : 7.061401241503109,
      "fat_value" : 9.301444243932576
    },
    "components" : [ {
      "data_points" : 1,
      "pct_weight" : 4.145608029883936,
      "gram_weight" : 7.386281948385884,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 1,
      "pct_weight" : 4.145608029883936,
      "gram_weight" : 7.386281948385884,
      "name" : "name",
      "is_refuse" : true
    } ],
    "name" : "name",
    "search_term" : "search_term",
    "categories" : [ "categories", "categories" ],
    "footnote" : "footnote",
    "common_name" : "common_name",
    "nutrients" : [ {
      "data_points" : 2,
      "min" : 6.027456183070403,
      "median" : 5.962133916683182,
      "max" : 1.4658129805029452,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 5,
      "description" : "description",
      "per_100g" : 0.8008281904610115,
      "footnote" : "footnote"
    }, {
      "data_points" : 2,
      "min" : 6.027456183070403,
      "median" : 5.962133916683182,
      "max" : 1.4658129805029452,
      "name" : "name",
      "measurement_unit" : "measurement_unit",
      "rank" : 5,
      "description" : "description",
      "per_100g" : 0.8008281904610115,
      "footnote" : "footnote"
    } ],
    "portions" : [ {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 1.0246457001441578,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 1,
      "modifier" : "modifier",
      "gram_weight" : 1.0246457001441578,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ]
  } ]
}}]
     - parameter find: (query) Search our database for a single ingredient or a specific set of ingredients.  **Example #1: Single Ingredient** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli&#x60;&#x60;&#x60;  **Example #2: Set of Ingredients** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;raw broccoli,buttermilk waffle,mashed potatoes&#x60;&#x60;&#x60;  **Important Notes**    * Comma-separated lists cannot contain more than **10 ingredients**. You must perform additional API calls if you are looking up more than 10 ingredients.  
     - parameter limit: (query) #### Set maximum number of records you want the API to return, per search term. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<IngredientObject> 
     */
    open class func foodIngredientSearchPhpGetWithRequestBuilder(find: String, limit: Limit_foodIngredientSearchPhpGet? = nil, userId: String? = nil) -> RequestBuilder<IngredientObject> {
        let path = "/food/ingredient/search.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "find": find,
                        "limit": limit?.rawValue,
                        "user_id": userId
        ])

        let requestBuilder: RequestBuilder<IngredientObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a recipe by ID
     - parameter id: (query) #### A recipe ID. Recipe IDs are exposed in the /recipe/search and /recipe/ingredient endpoints.  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;tdm_1143_0459d0028fcf8990724785b9e6775037&#x60;&#x60;&#x60;  
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func recipeIdPhpGet(id: String, userId: String? = nil, completion: @escaping ((_ data: RecipeObject?, _ error: ErrorResponse?) -> Void)) {
        recipeIdPhpGetWithRequestBuilder(id: id, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a recipe by ID
     - GET /recipe/id.php
     - ## Get a specific recipe using an ID.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/id.php?api_key=API_KEY&id=RECIPE_ID``` 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "base_ingredients" : [ "base_ingredients", "base_ingredients" ],
    "diabetic_exchanges" : [ "diabetic_exchanges", "diabetic_exchanges" ],
    "keywords" : [ "keywords", "keywords" ],
    "meta" : {
      "images" : {
        "standard" : "standard",
        "small" : "small",
        "thumbnail" : "thumbnail",
        "extra_large" : "extra_large",
        "large" : "large",
        "extra_small" : "extra_small",
        "grid_view" : "grid_view"
      },
      "created" : "created",
      "cuisine" : "cuisine",
      "modified" : "modified",
      "source" : "source",
      "url" : "url",
      "nutrients_notice" : "nutrients_notice"
    },
    "author" : "author",
    "topics" : [ "topics", "topics" ],
    "ingredients" : [ {
      "quantity" : "quantity",
      "description" : "description"
    }, {
      "quantity" : "quantity",
      "description" : "description"
    } ],
    "attributes" : {
      "servings" : "servings",
      "prep_time" : "prep_time",
      "serving_size" : "serving_size",
      "total_time" : "total_time"
    },
    "id" : "id",
    "categories" : [ "categories", "categories" ],
    "title" : "title",
    "nutrients" : {
      "vitamins" : [ null, null ],
      "carbs" : [ null, null ],
      "daily_values" : [ null, null ],
      "fat" : [ null, null ],
      "calories" : [ {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      }, {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      } ]
    }
  }, {
    "base_ingredients" : [ "base_ingredients", "base_ingredients" ],
    "diabetic_exchanges" : [ "diabetic_exchanges", "diabetic_exchanges" ],
    "keywords" : [ "keywords", "keywords" ],
    "meta" : {
      "images" : {
        "standard" : "standard",
        "small" : "small",
        "thumbnail" : "thumbnail",
        "extra_large" : "extra_large",
        "large" : "large",
        "extra_small" : "extra_small",
        "grid_view" : "grid_view"
      },
      "created" : "created",
      "cuisine" : "cuisine",
      "modified" : "modified",
      "source" : "source",
      "url" : "url",
      "nutrients_notice" : "nutrients_notice"
    },
    "author" : "author",
    "topics" : [ "topics", "topics" ],
    "ingredients" : [ {
      "quantity" : "quantity",
      "description" : "description"
    }, {
      "quantity" : "quantity",
      "description" : "description"
    } ],
    "attributes" : {
      "servings" : "servings",
      "prep_time" : "prep_time",
      "serving_size" : "serving_size",
      "total_time" : "total_time"
    },
    "id" : "id",
    "categories" : [ "categories", "categories" ],
    "title" : "title",
    "nutrients" : {
      "vitamins" : [ null, null ],
      "carbs" : [ null, null ],
      "daily_values" : [ null, null ],
      "fat" : [ null, null ],
      "calories" : [ {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      }, {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      } ]
    }
  } ]
}}]
     - parameter id: (query) #### A recipe ID. Recipe IDs are exposed in the /recipe/search and /recipe/ingredient endpoints.  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;tdm_1143_0459d0028fcf8990724785b9e6775037&#x60;&#x60;&#x60;  
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<RecipeObject> 
     */
    open class func recipeIdPhpGetWithRequestBuilder(id: String, userId: String? = nil) -> RequestBuilder<RecipeObject> {
        let path = "/recipe/id.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "id": id,
                        "user_id": userId
        ])

        let requestBuilder: RequestBuilder<RecipeObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_recipeIngredientPhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Get recipes using a list of ingredients
     - parameter list: (query) #### A single ingredient, or a comma-separated list of up to 3 ingredients. Recipes with each of these ingredients will be returned. **You can pass in up to 3 ingredients at a time.**  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;cheese,tomato,milk&#x60;&#x60;&#x60;  
     - parameter limit: (query) #### Set maximum number of records you want the API to return. The default value is \&quot;**3**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 3 records. You must increment the page number to access the next 3 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func recipeIngredientPhpGet(list: String, limit: Limit_recipeIngredientPhpGet? = nil, page: Int32? = nil, userId: String? = nil, completion: @escaping ((_ data: RecipeObject?, _ error: ErrorResponse?) -> Void)) {
        recipeIngredientPhpGetWithRequestBuilder(list: list, limit: limit, page: page, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get recipes using a list of ingredients
     - GET /recipe/ingredient.php
     - ## Get recipes that include all ingredients from a list.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example #1** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT```  **Example #2** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT,INGREDIENT,INGREDIENT``` 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "base_ingredients" : [ "base_ingredients", "base_ingredients" ],
    "diabetic_exchanges" : [ "diabetic_exchanges", "diabetic_exchanges" ],
    "keywords" : [ "keywords", "keywords" ],
    "meta" : {
      "images" : {
        "standard" : "standard",
        "small" : "small",
        "thumbnail" : "thumbnail",
        "extra_large" : "extra_large",
        "large" : "large",
        "extra_small" : "extra_small",
        "grid_view" : "grid_view"
      },
      "created" : "created",
      "cuisine" : "cuisine",
      "modified" : "modified",
      "source" : "source",
      "url" : "url",
      "nutrients_notice" : "nutrients_notice"
    },
    "author" : "author",
    "topics" : [ "topics", "topics" ],
    "ingredients" : [ {
      "quantity" : "quantity",
      "description" : "description"
    }, {
      "quantity" : "quantity",
      "description" : "description"
    } ],
    "attributes" : {
      "servings" : "servings",
      "prep_time" : "prep_time",
      "serving_size" : "serving_size",
      "total_time" : "total_time"
    },
    "id" : "id",
    "categories" : [ "categories", "categories" ],
    "title" : "title",
    "nutrients" : {
      "vitamins" : [ null, null ],
      "carbs" : [ null, null ],
      "daily_values" : [ null, null ],
      "fat" : [ null, null ],
      "calories" : [ {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      }, {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      } ]
    }
  }, {
    "base_ingredients" : [ "base_ingredients", "base_ingredients" ],
    "diabetic_exchanges" : [ "diabetic_exchanges", "diabetic_exchanges" ],
    "keywords" : [ "keywords", "keywords" ],
    "meta" : {
      "images" : {
        "standard" : "standard",
        "small" : "small",
        "thumbnail" : "thumbnail",
        "extra_large" : "extra_large",
        "large" : "large",
        "extra_small" : "extra_small",
        "grid_view" : "grid_view"
      },
      "created" : "created",
      "cuisine" : "cuisine",
      "modified" : "modified",
      "source" : "source",
      "url" : "url",
      "nutrients_notice" : "nutrients_notice"
    },
    "author" : "author",
    "topics" : [ "topics", "topics" ],
    "ingredients" : [ {
      "quantity" : "quantity",
      "description" : "description"
    }, {
      "quantity" : "quantity",
      "description" : "description"
    } ],
    "attributes" : {
      "servings" : "servings",
      "prep_time" : "prep_time",
      "serving_size" : "serving_size",
      "total_time" : "total_time"
    },
    "id" : "id",
    "categories" : [ "categories", "categories" ],
    "title" : "title",
    "nutrients" : {
      "vitamins" : [ null, null ],
      "carbs" : [ null, null ],
      "daily_values" : [ null, null ],
      "fat" : [ null, null ],
      "calories" : [ {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      }, {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      } ]
    }
  } ]
}}]
     - parameter list: (query) #### A single ingredient, or a comma-separated list of up to 3 ingredients. Recipes with each of these ingredients will be returned. **You can pass in up to 3 ingredients at a time.**  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;cheese,tomato,milk&#x60;&#x60;&#x60;  
     - parameter limit: (query) #### Set maximum number of records you want the API to return. The default value is \&quot;**3**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 3 records. You must increment the page number to access the next 3 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<RecipeObject> 
     */
    open class func recipeIngredientPhpGetWithRequestBuilder(list: String, limit: Limit_recipeIngredientPhpGet? = nil, page: Int32? = nil, userId: String? = nil) -> RequestBuilder<RecipeObject> {
        let path = "/recipe/ingredient.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "list": list,
                        "limit": limit?.rawValue,
                        "page": page?.encodeToJSON(),
                        "user_id": userId
        ])

        let requestBuilder: RequestBuilder<RecipeObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_recipeRandomPhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
    }

    /**
     Get random popular recipes
     - parameter limit: (query) #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;5&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func recipeRandomPhpGet(limit: Limit_recipeRandomPhpGet? = nil, userId: String? = nil, completion: @escaping ((_ data: RecipeObject?, _ error: ErrorResponse?) -> Void)) {
        recipeRandomPhpGetWithRequestBuilder(limit: limit, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get random popular recipes
     - GET /recipe/random.php
     - ## Get random recipes that have instructions and nutrients  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/random.php?api_key=API_KEY``` 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "base_ingredients" : [ "base_ingredients", "base_ingredients" ],
    "diabetic_exchanges" : [ "diabetic_exchanges", "diabetic_exchanges" ],
    "keywords" : [ "keywords", "keywords" ],
    "meta" : {
      "images" : {
        "standard" : "standard",
        "small" : "small",
        "thumbnail" : "thumbnail",
        "extra_large" : "extra_large",
        "large" : "large",
        "extra_small" : "extra_small",
        "grid_view" : "grid_view"
      },
      "created" : "created",
      "cuisine" : "cuisine",
      "modified" : "modified",
      "source" : "source",
      "url" : "url",
      "nutrients_notice" : "nutrients_notice"
    },
    "author" : "author",
    "topics" : [ "topics", "topics" ],
    "ingredients" : [ {
      "quantity" : "quantity",
      "description" : "description"
    }, {
      "quantity" : "quantity",
      "description" : "description"
    } ],
    "attributes" : {
      "servings" : "servings",
      "prep_time" : "prep_time",
      "serving_size" : "serving_size",
      "total_time" : "total_time"
    },
    "id" : "id",
    "categories" : [ "categories", "categories" ],
    "title" : "title",
    "nutrients" : {
      "vitamins" : [ null, null ],
      "carbs" : [ null, null ],
      "daily_values" : [ null, null ],
      "fat" : [ null, null ],
      "calories" : [ {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      }, {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      } ]
    }
  }, {
    "base_ingredients" : [ "base_ingredients", "base_ingredients" ],
    "diabetic_exchanges" : [ "diabetic_exchanges", "diabetic_exchanges" ],
    "keywords" : [ "keywords", "keywords" ],
    "meta" : {
      "images" : {
        "standard" : "standard",
        "small" : "small",
        "thumbnail" : "thumbnail",
        "extra_large" : "extra_large",
        "large" : "large",
        "extra_small" : "extra_small",
        "grid_view" : "grid_view"
      },
      "created" : "created",
      "cuisine" : "cuisine",
      "modified" : "modified",
      "source" : "source",
      "url" : "url",
      "nutrients_notice" : "nutrients_notice"
    },
    "author" : "author",
    "topics" : [ "topics", "topics" ],
    "ingredients" : [ {
      "quantity" : "quantity",
      "description" : "description"
    }, {
      "quantity" : "quantity",
      "description" : "description"
    } ],
    "attributes" : {
      "servings" : "servings",
      "prep_time" : "prep_time",
      "serving_size" : "serving_size",
      "total_time" : "total_time"
    },
    "id" : "id",
    "categories" : [ "categories", "categories" ],
    "title" : "title",
    "nutrients" : {
      "vitamins" : [ null, null ],
      "carbs" : [ null, null ],
      "daily_values" : [ null, null ],
      "fat" : [ null, null ],
      "calories" : [ {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      }, {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      } ]
    }
  } ]
}}]
     - parameter limit: (query) #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;5&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<RecipeObject> 
     */
    open class func recipeRandomPhpGetWithRequestBuilder(limit: Limit_recipeRandomPhpGet? = nil, userId: String? = nil) -> RequestBuilder<RecipeObject> {
        let path = "/recipe/random.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "limit": limit?.rawValue,
                        "user_id": userId
        ])

        let requestBuilder: RequestBuilder<RecipeObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter nutrientsRequired
     */
    public enum NutrientsRequired_recipeSearchPhpGet: Int32 { 
        case _1 = 1
        case _0 = 0
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_recipeSearchPhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
    }

    /**
     Get recipes using a title and optional filters
     - parameter title: (query) #### A recipe title  **Example** &gt; &#x60;&#x60;&#x60;&amp;title&#x3D;Banana Bread&#x60;&#x60;&#x60;  
     - parameter excludedCuisine: (query) #### A specific cuisine you want excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_cuisine&#x3D;Italian&#x60;&#x60;&#x60;  (optional)
     - parameter includedCuisine: (query) #### A specific cuisine you want included in results  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_cuisine&#x3D;Chinese&#x60;&#x60;&#x60;  (optional)
     - parameter excludedIngredient: (query) #### Recipes with this ingredient will be excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_ingredient&#x3D;egg&#x60;&#x60;&#x60;  (optional)
     - parameter includedIngredient: (query) #### Only recipes with this ingredient will be returned  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_ingredient&#x3D;apple&#x60;&#x60;&#x60;  (optional)
     - parameter nutrientsRequired: (query) #### Optionally require all recipes to include nutrition info. Recipes with, or without, nutrition info are returned by default.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrients_required&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter limit: (query) #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 5 records. You must increment the page number to access the next 5 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func recipeSearchPhpGet(title: String, excludedCuisine: String? = nil, includedCuisine: String? = nil, excludedIngredient: String? = nil, includedIngredient: String? = nil, nutrientsRequired: NutrientsRequired_recipeSearchPhpGet? = nil, limit: Limit_recipeSearchPhpGet? = nil, page: Int32? = nil, userId: String? = nil, completion: @escaping ((_ data: RecipeObject?, _ error: ErrorResponse?) -> Void)) {
        recipeSearchPhpGetWithRequestBuilder(title: title, excludedCuisine: excludedCuisine, includedCuisine: includedCuisine, excludedIngredient: excludedIngredient, includedIngredient: includedIngredient, nutrientsRequired: nutrientsRequired, limit: limit, page: page, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get recipes using a title and optional filters
     - GET /recipe/search.php
     - ## Get recipes using a title and optional filters.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example**  > ```https://chompthis.com/api/v2/recipe/search.php?api_key=API_KEY&title=TITLE``` 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "base_ingredients" : [ "base_ingredients", "base_ingredients" ],
    "diabetic_exchanges" : [ "diabetic_exchanges", "diabetic_exchanges" ],
    "keywords" : [ "keywords", "keywords" ],
    "meta" : {
      "images" : {
        "standard" : "standard",
        "small" : "small",
        "thumbnail" : "thumbnail",
        "extra_large" : "extra_large",
        "large" : "large",
        "extra_small" : "extra_small",
        "grid_view" : "grid_view"
      },
      "created" : "created",
      "cuisine" : "cuisine",
      "modified" : "modified",
      "source" : "source",
      "url" : "url",
      "nutrients_notice" : "nutrients_notice"
    },
    "author" : "author",
    "topics" : [ "topics", "topics" ],
    "ingredients" : [ {
      "quantity" : "quantity",
      "description" : "description"
    }, {
      "quantity" : "quantity",
      "description" : "description"
    } ],
    "attributes" : {
      "servings" : "servings",
      "prep_time" : "prep_time",
      "serving_size" : "serving_size",
      "total_time" : "total_time"
    },
    "id" : "id",
    "categories" : [ "categories", "categories" ],
    "title" : "title",
    "nutrients" : {
      "vitamins" : [ null, null ],
      "carbs" : [ null, null ],
      "daily_values" : [ null, null ],
      "fat" : [ null, null ],
      "calories" : [ {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      }, {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      } ]
    }
  }, {
    "base_ingredients" : [ "base_ingredients", "base_ingredients" ],
    "diabetic_exchanges" : [ "diabetic_exchanges", "diabetic_exchanges" ],
    "keywords" : [ "keywords", "keywords" ],
    "meta" : {
      "images" : {
        "standard" : "standard",
        "small" : "small",
        "thumbnail" : "thumbnail",
        "extra_large" : "extra_large",
        "large" : "large",
        "extra_small" : "extra_small",
        "grid_view" : "grid_view"
      },
      "created" : "created",
      "cuisine" : "cuisine",
      "modified" : "modified",
      "source" : "source",
      "url" : "url",
      "nutrients_notice" : "nutrients_notice"
    },
    "author" : "author",
    "topics" : [ "topics", "topics" ],
    "ingredients" : [ {
      "quantity" : "quantity",
      "description" : "description"
    }, {
      "quantity" : "quantity",
      "description" : "description"
    } ],
    "attributes" : {
      "servings" : "servings",
      "prep_time" : "prep_time",
      "serving_size" : "serving_size",
      "total_time" : "total_time"
    },
    "id" : "id",
    "categories" : [ "categories", "categories" ],
    "title" : "title",
    "nutrients" : {
      "vitamins" : [ null, null ],
      "carbs" : [ null, null ],
      "daily_values" : [ null, null ],
      "fat" : [ null, null ],
      "calories" : [ {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      }, {
        "title" : "title",
        "value" : "value",
        "percent" : "percent"
      } ]
    }
  } ]
}}]
     - parameter title: (query) #### A recipe title  **Example** &gt; &#x60;&#x60;&#x60;&amp;title&#x3D;Banana Bread&#x60;&#x60;&#x60;  
     - parameter excludedCuisine: (query) #### A specific cuisine you want excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_cuisine&#x3D;Italian&#x60;&#x60;&#x60;  (optional)
     - parameter includedCuisine: (query) #### A specific cuisine you want included in results  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_cuisine&#x3D;Chinese&#x60;&#x60;&#x60;  (optional)
     - parameter excludedIngredient: (query) #### Recipes with this ingredient will be excluded from results  **Example** &gt; &#x60;&#x60;&#x60;&amp;excluded_ingredient&#x3D;egg&#x60;&#x60;&#x60;  (optional)
     - parameter includedIngredient: (query) #### Only recipes with this ingredient will be returned  **Example** &gt; &#x60;&#x60;&#x60;&amp;included_ingredient&#x3D;apple&#x60;&#x60;&#x60;  (optional)
     - parameter nutrientsRequired: (query) #### Optionally require all recipes to include nutrition info. Recipes with, or without, nutrition info are returned by default.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrients_required&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter limit: (query) #### Set maximum number of records you want the API to return. The default value is \&quot;**5**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 5 records. You must increment the page number to access the next 5 records, and so on. The default value is \&quot;**1**.\&quot;  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter userId: (query) #### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn&#x27;t have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** &gt; &#x60;&#x60;&#x60;&amp;user_id&#x3D;fehef8w4ha&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<RecipeObject> 
     */
    open class func recipeSearchPhpGetWithRequestBuilder(title: String, excludedCuisine: String? = nil, includedCuisine: String? = nil, excludedIngredient: String? = nil, includedIngredient: String? = nil, nutrientsRequired: NutrientsRequired_recipeSearchPhpGet? = nil, limit: Limit_recipeSearchPhpGet? = nil, page: Int32? = nil, userId: String? = nil) -> RequestBuilder<RecipeObject> {
        let path = "/recipe/search.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "title": title,
                        "excluded_cuisine": excludedCuisine,
                        "included_cuisine": includedCuisine,
                        "excluded_ingredient": excludedIngredient,
                        "included_ingredient": includedIngredient,
                        "nutrients_required": nutrientsRequired?.rawValue,
                        "limit": limit?.rawValue,
                        "page": page?.encodeToJSON(),
                        "user_id": userId
        ])

        let requestBuilder: RequestBuilder<RecipeObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
