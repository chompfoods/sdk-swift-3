//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI: APIBase {
    /**
     Get a branded food item using a barcode
     - parameter code: (query) #### UPC/EAN barcode  **Example** &gt; &#x60;&#x60;&#x60;&amp;code&#x3D;0842234000988&#x60;&#x60;&#x60;  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedBarcodePhpGet(code: String, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedBarcodePhpGetWithRequestBuilder(code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a branded food item using a barcode
     - GET /food/branded/barcode.php
     - ## Get data for a branded food using the food's UPC/EAN barcode.  **Example**  > ```https://chompthis.com/api/v2/food/branded/barcode.php?api_key=API_KEY&code=CODE```  **Tips**   * Read our **[Knowledge Base article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do)** for helpful tips and tricks. 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 6,
      "non_english_speaking" : 8
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "chomp" : {
        "size" : "size"
      },
      "usda" : {
        "size_fulltext" : "size_fulltext",
        "size" : "size",
        "measurement_unit" : "measurement_unit"
      }
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      }, {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      } ],
      "usda" : [ {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      }, {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      } ]
    },
    "protein_conversion_factor" : 1.4894159098541704,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 7,
        "name" : "name",
        "compatibility_level" : 6,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      }
    },
    "ingredients" : {
      "chomp" : "chomp",
      "usda" : "usda"
    },
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 1.0246457001441578,
      "protein_value" : 7.386281948385884,
      "fat_value" : 1.2315135367772556
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 6,
      "non_english_speaking" : 8
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "chomp" : {
        "size" : "size"
      },
      "usda" : {
        "size_fulltext" : "size_fulltext",
        "size" : "size",
        "measurement_unit" : "measurement_unit"
      }
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      }, {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      } ],
      "usda" : [ {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      }, {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      } ]
    },
    "protein_conversion_factor" : 1.4894159098541704,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 7,
        "name" : "name",
        "compatibility_level" : 6,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      }
    },
    "ingredients" : {
      "chomp" : "chomp",
      "usda" : "usda"
    },
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 1.0246457001441578,
      "protein_value" : 7.386281948385884,
      "fat_value" : 1.2315135367772556
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter code: (query) #### UPC/EAN barcode  **Example** &gt; &#x60;&#x60;&#x60;&amp;code&#x3D;0842234000988&#x60;&#x60;&#x60;  
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedBarcodePhpGetWithRequestBuilder(code: String) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/barcode.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "code": code
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter source
     */
    public enum Source_foodBrandedIdPhpGet: String { 
        case chomp = "Chomp"
        case usda = "USDA"
    }

    /**
     Get a branded food item using an ID number
     - parameter id: (query) #### The ID number of a branded food item.  **Example #1: Using Chomp ID** &gt; &#x60;&#x60;&#x60;&amp;id&#x3D;15&#x60;&#x60;&#x60;  **Example #2: Using FDC ID** &gt; &#x60;&#x60;&#x60;&amp;id&#x3D;FDC_ID&amp;source&#x3D;USDA&#x60;&#x60;&#x60;  
     - parameter source: (query) #### Configure the endpoint to accept food IDs from various data sources. This endpoint defaults to Chomp but can accept FDC IDs.  **Example** &gt; &#x60;&#x60;&#x60;&amp;source&#x3D;Chomp&#x60;&#x60;&#x60;  **Tips**   * Pass in &#x60;&#x60;&#x60;&amp;source&#x3D;USDA&#x60;&#x60;&#x60; if you want to look up food items using a USDA FDC ID.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedIdPhpGet(id: Int32, source: Source_foodBrandedIdPhpGet? = nil, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedIdPhpGetWithRequestBuilder(id: id, source: source).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a branded food item using an ID number
     - GET /food/branded/id.php
     - ## Get data for a branded food using Chomp's internal ID number.  **Example** > ```https://chompthis.com/api/v2/food/branded/id.php?api_key=API_KEY&id=ID```  **Tips**   * Find a food's ID by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.   * Alternatively, set the \"source\" parameter to \"USDA\" and use the food's FDC ID. 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 6,
      "non_english_speaking" : 8
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "chomp" : {
        "size" : "size"
      },
      "usda" : {
        "size_fulltext" : "size_fulltext",
        "size" : "size",
        "measurement_unit" : "measurement_unit"
      }
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      }, {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      } ],
      "usda" : [ {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      }, {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      } ]
    },
    "protein_conversion_factor" : 1.4894159098541704,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 7,
        "name" : "name",
        "compatibility_level" : 6,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      }
    },
    "ingredients" : {
      "chomp" : "chomp",
      "usda" : "usda"
    },
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 1.0246457001441578,
      "protein_value" : 7.386281948385884,
      "fat_value" : 1.2315135367772556
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 6,
      "non_english_speaking" : 8
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "chomp" : {
        "size" : "size"
      },
      "usda" : {
        "size_fulltext" : "size_fulltext",
        "size" : "size",
        "measurement_unit" : "measurement_unit"
      }
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      }, {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      } ],
      "usda" : [ {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      }, {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      } ]
    },
    "protein_conversion_factor" : 1.4894159098541704,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 7,
        "name" : "name",
        "compatibility_level" : 6,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      }
    },
    "ingredients" : {
      "chomp" : "chomp",
      "usda" : "usda"
    },
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 1.0246457001441578,
      "protein_value" : 7.386281948385884,
      "fat_value" : 1.2315135367772556
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter id: (query) #### The ID number of a branded food item.  **Example #1: Using Chomp ID** &gt; &#x60;&#x60;&#x60;&amp;id&#x3D;15&#x60;&#x60;&#x60;  **Example #2: Using FDC ID** &gt; &#x60;&#x60;&#x60;&amp;id&#x3D;FDC_ID&amp;source&#x3D;USDA&#x60;&#x60;&#x60;  
     - parameter source: (query) #### Configure the endpoint to accept food IDs from various data sources. This endpoint defaults to Chomp but can accept FDC IDs.  **Example** &gt; &#x60;&#x60;&#x60;&amp;source&#x3D;Chomp&#x60;&#x60;&#x60;  **Tips**   * Pass in &#x60;&#x60;&#x60;&amp;source&#x3D;USDA&#x60;&#x60;&#x60; if you want to look up food items using a USDA FDC ID.  (optional)
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedIdPhpGetWithRequestBuilder(id: Int32, source: Source_foodBrandedIdPhpGet? = nil) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/id.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "id": id.encodeToJSON(),
                        "source": source?.rawValue
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_foodBrandedNamePhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
    }

    /**
     Get a branded food item by name
     - parameter name: (query) #### Search for branded food items using a general food name keyword. This does not have to exactly match the \&quot;official\&quot; name for the food.  **Example** &gt; &#x60;&#x60;&#x60;&amp;name&#x3D;Starburst&#x60;&#x60;&#x60;  
     - parameter limit: (query) #### Set maximum number of records you want the API to return.  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on.  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedNamePhpGet(name: String, limit: Limit_foodBrandedNamePhpGet? = nil, page: Int32? = nil, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedNamePhpGetWithRequestBuilder(name: name, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a branded food item by name
     - GET /food/branded/name.php
     - ## Search for branded food items by name.  **Example** > ```https://chompthis.com/api/v2/food/branded/name.php?api_key=API_KEY&name=NAME```  **Tips**   * Get started by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 6,
      "non_english_speaking" : 8
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "chomp" : {
        "size" : "size"
      },
      "usda" : {
        "size_fulltext" : "size_fulltext",
        "size" : "size",
        "measurement_unit" : "measurement_unit"
      }
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      }, {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      } ],
      "usda" : [ {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      }, {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      } ]
    },
    "protein_conversion_factor" : 1.4894159098541704,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 7,
        "name" : "name",
        "compatibility_level" : 6,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      }
    },
    "ingredients" : {
      "chomp" : "chomp",
      "usda" : "usda"
    },
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 1.0246457001441578,
      "protein_value" : 7.386281948385884,
      "fat_value" : 1.2315135367772556
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 6,
      "non_english_speaking" : 8
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "chomp" : {
        "size" : "size"
      },
      "usda" : {
        "size_fulltext" : "size_fulltext",
        "size" : "size",
        "measurement_unit" : "measurement_unit"
      }
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      }, {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      } ],
      "usda" : [ {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      }, {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      } ]
    },
    "protein_conversion_factor" : 1.4894159098541704,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 7,
        "name" : "name",
        "compatibility_level" : 6,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      }
    },
    "ingredients" : {
      "chomp" : "chomp",
      "usda" : "usda"
    },
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 1.0246457001441578,
      "protein_value" : 7.386281948385884,
      "fat_value" : 1.2315135367772556
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter name: (query) #### Search for branded food items using a general food name keyword. This does not have to exactly match the \&quot;official\&quot; name for the food.  **Example** &gt; &#x60;&#x60;&#x60;&amp;name&#x3D;Starburst&#x60;&#x60;&#x60;  
     - parameter limit: (query) #### Set maximum number of records you want the API to return.  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on.  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedNamePhpGetWithRequestBuilder(name: String, limit: Limit_foodBrandedNamePhpGet? = nil, page: Int32? = nil) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/name.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "name": name,
                        "limit": limit?.rawValue,
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter diet
     */
    public enum Diet_foodBrandedSearchPhpGet: String { 
        case vegan = "Vegan"
        case vegetarian = "Vegetarian"
        case glutenFree = "Gluten Free"
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_foodBrandedSearchPhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
    }

    /**
     Get data for branded food items using various search parameters
     - parameter allergen: (query) #### Filter the search to only include branded foods that contain a specific allergen.  **Example** &gt; &#x60;&#x60;&#x60;&amp;allergen&#x3D;Peanuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter brand: (query) #### Filter the search to only include branded foods that are owned by a specific brand.  **Example** &gt; &#x60;&#x60;&#x60;&amp;brand&#x3D;Starbucks&#x60;&#x60;&#x60;  (optional)
     - parameter category: (query) #### Filter the search to only include branded foods from a specific category.  **Example** &gt; &#x60;&#x60;&#x60;&amp;category&#x3D;Plant Based Foods&#x60;&#x60;&#x60;  (optional)
     - parameter country: (query) #### Filter the search to only include branded foods that are sold in a specific country.  **Example** &gt; &#x60;&#x60;&#x60;&amp;country&#x3D;United States&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter diet: (query) #### Filter the search to only include branded foods that are considered compatible with a specific diet.  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter ingredient: (query) #### Filter the search to only include branded foods that contain a specific ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;ingredient&#x3D;Salt&#x60;&#x60;&#x60;  (optional)
     - parameter keyword: (query) #### Filter the search to only include branded foods that are associated with a specific keyword.  **Example** &gt; &#x60;&#x60;&#x60;&amp;keyword&#x3D;Organic&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter mineral: (query) #### Filter the search to only include branded foods that contain a specific mineral.  **Example** &gt; &#x60;&#x60;&#x60;&amp;mineral&#x3D;Potassium&#x60;&#x60;&#x60;  (optional)
     - parameter nutrient: (query) #### Filter the search to only include branded foods that contain a specific nutrient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrient&#x3D;Caffeine&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter palmOil: (query) #### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.  **Example** &gt; &#x60;&#x60;&#x60;&amp;palm_oil&#x3D;E160a Beta Carotene&#x60;&#x60;&#x60;  (optional)
     - parameter trace: (query) ### Filter the search to only include branded foods that contain a specific trace ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;trace&#x3D;Tree Nuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter vitamin: (query) #### Filter the search to only include branded foods that contain a specific vitamin.  **Example** &gt; &#x60;&#x60;&#x60;&amp;vitamin&#x3D;Biotin&#x60;&#x60;&#x60;  (optional)
     - parameter limit: (query) #### Set maximum number of records you want the API to return.  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on.  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodBrandedSearchPhpGet(allergen: String? = nil, brand: String? = nil, category: String? = nil, country: String? = nil, diet: Diet_foodBrandedSearchPhpGet? = nil, ingredient: String? = nil, keyword: String? = nil, mineral: String? = nil, nutrient: String? = nil, palmOil: String? = nil, trace: String? = nil, vitamin: String? = nil, limit: Limit_foodBrandedSearchPhpGet? = nil, page: Int32? = nil, completion: @escaping ((_ data: BrandedFoodObject?, _ error: ErrorResponse?) -> Void)) {
        foodBrandedSearchPhpGetWithRequestBuilder(allergen: allergen, brand: brand, category: category, country: country, diet: diet, ingredient: ingredient, keyword: keyword, mineral: mineral, nutrient: nutrient, palmOil: palmOil, trace: trace, vitamin: vitamin, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get data for branded food items using various search parameters
     - GET /food/branded/search.php
     - ## Search for branded food items using various parameters.  **Example** > ```https://chompthis.com/api/v2/food/branded/search.php?api_key=API_KEY&brand=BRAND&country=COUNTRY&page=1```  **Tips**    * Get started by using the **[Query Builder](https://chompthis.com/api/build.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "minerals" : [ "minerals", "minerals" ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 6,
      "non_english_speaking" : 8
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "chomp" : {
        "size" : "size"
      },
      "usda" : {
        "size_fulltext" : "size_fulltext",
        "size" : "size",
        "measurement_unit" : "measurement_unit"
      }
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      }, {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      } ],
      "usda" : [ {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      }, {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      } ]
    },
    "protein_conversion_factor" : 1.4894159098541704,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 7,
        "name" : "name",
        "compatibility_level" : 6,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      }
    },
    "ingredients" : {
      "chomp" : "chomp",
      "usda" : "usda"
    },
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 1.0246457001441578,
      "protein_value" : 7.386281948385884,
      "fat_value" : 1.2315135367772556
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  }, {
    "minerals" : [ "minerals", "minerals" ],
    "keywords" : [ "keywords", "keywords" ],
    "country_details" : {
      "english_speaking" : 6,
      "non_english_speaking" : 8
    },
    "description" : "description",
    "has_english_ingredients" : true,
    "palm_oil_ingredients" : [ "palm_oil_ingredients", "palm_oil_ingredients" ],
    "serving" : {
      "chomp" : {
        "size" : "size"
      },
      "usda" : {
        "size_fulltext" : "size_fulltext",
        "size" : "size",
        "measurement_unit" : "measurement_unit"
      }
    },
    "nutrients" : {
      "chomp" : [ {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      }, {
        "total" : 5.962133916683182,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "per_100g" : 6.027456183070403,
        "per_serving" : 1.4658129805029452
      } ],
      "usda" : [ {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      }, {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      } ]
    },
    "protein_conversion_factor" : 1.4894159098541704,
    "packaging_photos" : {
      "nutrition" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "ingredients" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      },
      "front" : {
        "small" : "small",
        "thumb" : "thumb",
        "display" : "display"
      }
    },
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 7,
        "name" : "name",
        "compatibility_level" : 6,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      }
    },
    "ingredients" : {
      "chomp" : "chomp",
      "usda" : "usda"
    },
    "categories" : [ "categories", "categories" ],
    "barcode" : "barcode",
    "brand" : "brand",
    "package" : {
      "quantity" : 0,
      "size" : "size"
    },
    "traces" : [ "traces", "traces" ],
    "diet_flags" : [ {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    }, {
      "ingredient" : "ingredient",
      "is_allergen" : true,
      "ingredient_description" : "ingredient_description",
      "compatibility_level" : 9,
      "is_compatible" : "is_compatible",
      "diet_label" : "diet_label",
      "compatibility_description" : "compatibility_description"
    } ],
    "countries" : [ "countries", "countries" ],
    "footnote" : "footnote",
    "allergens" : [ "allergens", "allergens" ],
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 1.0246457001441578,
      "protein_value" : 7.386281948385884,
      "fat_value" : 1.2315135367772556
    },
    "ingredient_list" : [ "ingredient_list", "ingredient_list" ],
    "vitamins" : [ "vitamins", "vitamins" ],
    "name" : "name",
    "brand_list" : [ "brand_list", "brand_list" ]
  } ]
}}]
     - parameter allergen: (query) #### Filter the search to only include branded foods that contain a specific allergen.  **Example** &gt; &#x60;&#x60;&#x60;&amp;allergen&#x3D;Peanuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter brand: (query) #### Filter the search to only include branded foods that are owned by a specific brand.  **Example** &gt; &#x60;&#x60;&#x60;&amp;brand&#x3D;Starbucks&#x60;&#x60;&#x60;  (optional)
     - parameter category: (query) #### Filter the search to only include branded foods from a specific category.  **Example** &gt; &#x60;&#x60;&#x60;&amp;category&#x3D;Plant Based Foods&#x60;&#x60;&#x60;  (optional)
     - parameter country: (query) #### Filter the search to only include branded foods that are sold in a specific country.  **Example** &gt; &#x60;&#x60;&#x60;&amp;country&#x3D;United States&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter diet: (query) #### Filter the search to only include branded foods that are considered compatible with a specific diet.  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter ingredient: (query) #### Filter the search to only include branded foods that contain a specific ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;ingredient&#x3D;Salt&#x60;&#x60;&#x60;  (optional)
     - parameter keyword: (query) #### Filter the search to only include branded foods that are associated with a specific keyword.  **Example** &gt; &#x60;&#x60;&#x60;&amp;keyword&#x3D;Organic&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter mineral: (query) #### Filter the search to only include branded foods that contain a specific mineral.  **Example** &gt; &#x60;&#x60;&#x60;&amp;mineral&#x3D;Potassium&#x60;&#x60;&#x60;  (optional)
     - parameter nutrient: (query) #### Filter the search to only include branded foods that contain a specific nutrient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;nutrient&#x3D;Caffeine&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter palmOil: (query) #### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.  **Example** &gt; &#x60;&#x60;&#x60;&amp;palm_oil&#x3D;E160a Beta Carotene&#x60;&#x60;&#x60;  (optional)
     - parameter trace: (query) ### Filter the search to only include branded foods that contain a specific trace ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;trace&#x3D;Tree Nuts&#x60;&#x60;&#x60;  **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.  (optional)
     - parameter vitamin: (query) #### Filter the search to only include branded foods that contain a specific vitamin.  **Example** &gt; &#x60;&#x60;&#x60;&amp;vitamin&#x3D;Biotin&#x60;&#x60;&#x60;  (optional)
     - parameter limit: (query) #### Set maximum number of records you want the API to return.  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;10&#x60;&#x60;&#x60;  (optional)
     - parameter page: (query) #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on.  **Example** &gt; &#x60;&#x60;&#x60;&amp;page&#x3D;1&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<BrandedFoodObject> 
     */
    open class func foodBrandedSearchPhpGetWithRequestBuilder(allergen: String? = nil, brand: String? = nil, category: String? = nil, country: String? = nil, diet: Diet_foodBrandedSearchPhpGet? = nil, ingredient: String? = nil, keyword: String? = nil, mineral: String? = nil, nutrient: String? = nil, palmOil: String? = nil, trace: String? = nil, vitamin: String? = nil, limit: Limit_foodBrandedSearchPhpGet? = nil, page: Int32? = nil) -> RequestBuilder<BrandedFoodObject> {
        let path = "/food/branded/search.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "allergen": allergen,
                        "brand": brand,
                        "category": category,
                        "country": country,
                        "diet": diet?.rawValue,
                        "ingredient": ingredient,
                        "keyword": keyword,
                        "mineral": mineral,
                        "nutrient": nutrient,
                        "palm_oil": palmOil,
                        "trace": trace,
                        "vitamin": vitamin,
                        "limit": limit?.rawValue,
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BrandedFoodObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter limit
     */
    public enum Limit_foodIngredientSearchPhpGet: Int32 { 
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Get raw/generic food ingredient item(s)
     - parameter find: (query) Search our database for a single ingredient or a specific set of ingredients.  **Example #1: Single Ingredient** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;broccoli&#x60;&#x60;&#x60;  **Example #2: Set of Ingredients** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;broccoli,cauliflower,spinach&amp;list&#x3D;true&#x60;&#x60;&#x60;  **Important Notes**    * Set the \&quot;list\&quot; parameter to \&quot;true\&quot; before passing in a comma-separated list of ingredients.   * Comma-separated lists cannot contain more than **15 ingredients**. You must perform additional API calls if you are looking up more than 15 ingredients.  
     - parameter list: (query) #### Setting &#x60;&#x60;&#x60;&amp;list&#x3D;true&#x60;&#x60;&#x60; will configure this endpoint to allow searching for ingredients using a comma-separated list. By default, this endpoint will **only** return results for the first ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;true&#x60;&#x60;&#x60;  
     - parameter raw: (query) #### Optionally filter the search result to only include raw ingredients.  **Example** &gt; &#x60;&#x60;&#x60;&amp;raw&#x3D;true&#x60;&#x60;&#x60;  (optional)
     - parameter limit: (query) #### Set maximum number of records you want the API to return, per search term.  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func foodIngredientSearchPhpGet(find: Int32, list: Bool, raw: Bool? = nil, limit: Limit_foodIngredientSearchPhpGet? = nil, completion: @escaping ((_ data: IngredientObject?, _ error: ErrorResponse?) -> Void)) {
        foodIngredientSearchPhpGetWithRequestBuilder(find: find, list: list, raw: raw, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get raw/generic food ingredient item(s)
     - GET /food/ingredient/search.php
     - ## Get data for a specific ingredient or a specific set of ingredients.  **Example #1: Single Ingredient** > ```https://chompthis.com/api/v2/ingredient/search.php?api_key=API_KEY&find=broccoli&raw=true```  **Example #2: Set of Ingredients** > ```https://chompthis.com/api/v2/ingredient/search.php?api_key=API_KEY&find=broccoli,cauliflower,spinach&list=true&raw=true```  **Tips**   * Expose ingredient endpoints by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.  > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription. 
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "protein_conversion_factor" : 0.8008281904610115,
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 1.0246457001441578,
      "protein_value" : 7.386281948385884,
      "fat_value" : 1.2315135367772556
    },
    "components" : [ {
      "data_points" : 5,
      "pct_weight" : 6.027456183070403,
      "gram_weight" : 1.4658129805029452,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 5,
      "pct_weight" : 6.027456183070403,
      "gram_weight" : 1.4658129805029452,
      "name" : "name",
      "is_refuse" : true
    } ],
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 7,
        "name" : "name",
        "compatibility_level" : 6,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      }
    },
    "name" : "name",
    "common_names" : "common_names",
    "description" : "description",
    "categories" : [ "categories", "categories" ],
    "footnote" : "footnote",
    "nutrients" : {
      "usda" : [ {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      }, {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      } ]
    },
    "portions" : [ {
      "data_points" : 2,
      "modifier" : "modifier",
      "gram_weight" : 5.637376656633329,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 2,
      "modifier" : "modifier",
      "gram_weight" : 5.637376656633329,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ]
  }, {
    "protein_conversion_factor" : 0.8008281904610115,
    "calorie_conversion_factor" : {
      "carbohydrate_value" : 1.0246457001441578,
      "protein_value" : 7.386281948385884,
      "fat_value" : 1.2315135367772556
    },
    "components" : [ {
      "data_points" : 5,
      "pct_weight" : 6.027456183070403,
      "gram_weight" : 1.4658129805029452,
      "name" : "name",
      "is_refuse" : true
    }, {
      "data_points" : 5,
      "pct_weight" : 6.027456183070403,
      "gram_weight" : 1.4658129805029452,
      "name" : "name",
      "is_refuse" : true
    } ],
    "diet_labels" : {
      "vegetarian" : {
        "confidence_description" : "confidence_description",
        "confidence" : 4,
        "name" : "name",
        "compatibility_level" : 1,
        "is_compatible" : true
      },
      "vegan" : {
        "confidence_description" : "confidence_description",
        "confidence" : 7,
        "name" : "name",
        "compatibility_level" : 6,
        "is_compatible" : true
      },
      "gluten_free" : {
        "confidence_description" : "confidence_description",
        "confidence" : 9,
        "name" : "name",
        "compatibility_level" : 5,
        "is_compatible" : true
      }
    },
    "name" : "name",
    "common_names" : "common_names",
    "description" : "description",
    "categories" : [ "categories", "categories" ],
    "footnote" : "footnote",
    "nutrients" : {
      "usda" : [ {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      }, {
        "data_points" : 4,
        "min" : 7.061401241503109,
        "median" : 3.616076749251911,
        "max" : 9.301444243932576,
        "name" : "name",
        "measurement_unit" : "measurement_unit",
        "rank" : 2,
        "description" : "description",
        "id" : 5,
        "per_100g" : 2.3021358869347655,
        "footnote" : "footnote"
      } ]
    },
    "portions" : [ {
      "data_points" : 2,
      "modifier" : "modifier",
      "gram_weight" : 5.637376656633329,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    }, {
      "data_points" : 2,
      "modifier" : "modifier",
      "gram_weight" : 5.637376656633329,
      "measurement_unit" : "measurement_unit",
      "description" : "description",
      "footnote" : "footnote"
    } ]
  } ]
}}]
     - parameter find: (query) Search our database for a single ingredient or a specific set of ingredients.  **Example #1: Single Ingredient** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;broccoli&#x60;&#x60;&#x60;  **Example #2: Set of Ingredients** &gt; &#x60;&#x60;&#x60;&amp;find&#x3D;broccoli,cauliflower,spinach&amp;list&#x3D;true&#x60;&#x60;&#x60;  **Important Notes**    * Set the \&quot;list\&quot; parameter to \&quot;true\&quot; before passing in a comma-separated list of ingredients.   * Comma-separated lists cannot contain more than **15 ingredients**. You must perform additional API calls if you are looking up more than 15 ingredients.  
     - parameter list: (query) #### Setting &#x60;&#x60;&#x60;&amp;list&#x3D;true&#x60;&#x60;&#x60; will configure this endpoint to allow searching for ingredients using a comma-separated list. By default, this endpoint will **only** return results for the first ingredient.  **Example** &gt; &#x60;&#x60;&#x60;&amp;list&#x3D;true&#x60;&#x60;&#x60;  
     - parameter raw: (query) #### Optionally filter the search result to only include raw ingredients.  **Example** &gt; &#x60;&#x60;&#x60;&amp;raw&#x3D;true&#x60;&#x60;&#x60;  (optional)
     - parameter limit: (query) #### Set maximum number of records you want the API to return, per search term.  **Example** &gt; &#x60;&#x60;&#x60;&amp;limit&#x3D;3&#x60;&#x60;&#x60;  (optional)
     - returns: RequestBuilder<IngredientObject> 
     */
    open class func foodIngredientSearchPhpGetWithRequestBuilder(find: Int32, list: Bool, raw: Bool? = nil, limit: Limit_foodIngredientSearchPhpGet? = nil) -> RequestBuilder<IngredientObject> {
        let path = "/food/ingredient/search.php"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "find": find.encodeToJSON(),
                        "list": list,
                        "raw": raw,
                        "limit": limit?.rawValue
        ])

        let requestBuilder: RequestBuilder<IngredientObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
